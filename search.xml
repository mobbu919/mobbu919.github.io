<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>解决git中443问题</title>
    <url>/2023/08/08/20230803_443/</url>
    <content><![CDATA[<p>解决当使用魔法后依旧<code>git push -u origin main</code>出现443TIME OUT失败的问题。</p>
<span id="more"></span>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在本地修改库，git到github时一直443，time out。最初以为是网络的问题。</p>
<p>但是使用了魔法，还是没有效果。于是最终发现是代理没有修改端口。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol>
<li>在设置中找到代理的端口，比如我这里是 127.0.0.1:10809</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803162424.png" alt="img"></p>
<ol start="2">
<li>bash中输入以下代码即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:10809</span><br><span class="line">git config --global https.proxy http://127.0.0.1:10809</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown的简单用法</title>
    <url>/2023/08/09/20230808_markdownLanguage/</url>
    <content><![CDATA[<p>如果需要经常记录一些东西，那么markdown就是一个绕不开的东西，而习惯用markdown也会养成记录的习惯，本文主要从四个方面介绍markdown的简单用法，分别是1.markdown简介，2.markdown编译器，3.markdown语法。</p>
<p>当你经常用markdown记录时也会有一个烦恼就是如何实现多设备同步查看记录的文件呢，这时你可以选择在一些博客网站创建自己的账号，比如CSDN，博客园等，又或者直接建立一个属于你自己的博客网站了，这里可以看博主的另一篇博客<a href="https://mobbu.space/2023/08/03/20230803_blog%E7%BD%91%E7%AB%99/">如何建立自己的博客网站</a>里面很详细的介绍了如何搭建自己的博客网站。</p>
<span id="more"></span>

<p>markdown官方中文网站就有在线编辑器和一些基础用法，可以在这里尝试markdown，<a href="https://markdown.com.cn/">markdown官方网站</a></p>
<h1 id="1-Markdown简介"><a href="#1-Markdown简介" class="headerlink" title="1 Markdown简介"></a>1 Markdown简介</h1><p>Markdown 是一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素。Markdown 由 John Gruber 于 2004 年创建，如今已成为世界上最受欢迎的标记语言之一。</p>
<h2 id="1-1-Markdown特点"><a href="#1-1-Markdown特点" class="headerlink" title="1.1 Markdown特点"></a>1.1 Markdown特点</h2><ol>
<li>专注于文字内容；</li>
<li>纯文本，易读易写，可以方便地纳入版本控制；</li>
<li>语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版。</li>
</ol>
<h2 id="1-2-Markdown的优点"><a href="#1-2-Markdown的优点" class="headerlink" title="1.2 Markdown的优点"></a>1.2 Markdown的优点</h2><ol>
<li>使用范围广，StackOverflow、CSDN、掘金、简书、GitBook、有道云笔记、V2EX、光谷社区等。主流的代码托管平台，如 GitHub、GitLab、BitBucket、Coding、Gitee 等等，都支持 Markdown 语法，很多开源项目的 README、开发文档、帮助文档、Wiki 等都用 Markdown 写作。</li>
<li>可移植性强，可以轻松从一个平台移植到另外一个平台。</li>
<li>可读性强，虽然markdown不是一个所见即所得的记录方式，但是在未编译的情况下可读性也很高，编译之后的格式更加工整美观。</li>
</ol>
<h1 id="2-Markdown编译器"><a href="#2-Markdown编译器" class="headerlink" title="2 Markdown编译器"></a>2 Markdown编译器</h1><p>markdown的编译器有很多，你甚至可以直接用记事本来进行编写(仅编写)，但是无法实时预览编译效果。一般使用最多的markdown编译器有Typora、Atom和vscode等。博主使用的是vscode，因为我喜欢这种集成到一起管理的感觉，以后或许会记录我使用到的vscode的一些功能的博客。这里简要介绍一下在vscode中编写markdown的界面和流程</p>
<h2 id="2-1-vscode界面"><a href="#2-1-vscode界面" class="headerlink" title="2.1 vscode界面"></a>2.1 vscode界面</h2><p>下载安装后，打开vscode，界面如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230808193654.png"></p>
<p>其中1为资源管理器，2为查找，3为源代码管理，4为运行和调试，5为扩展，如果你的界面是英文，你首先可以在扩展中搜索简体中文，安装后重启即可。</p>
<p>然后可以点击资源管理器打开文件夹或者直接在右侧界面中打开文件夹，一般我们习惯打开文件夹管理。比如我创建D盘markdown文件夹。</p>
<h2 id="2-2-markdown编辑界面"><a href="#2-2-markdown编辑界面" class="headerlink" title="2.2 markdown编辑界面"></a>2.2 markdown编辑界面</h2><p>比如打开markdown文件夹，新建一个markdown.md文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230808194144.png"></p>
<p>此时界面如上图，可以看到大致分为三个部分，侧边栏，顶部栏和编辑区。</p>
<ul>
<li><p>侧边栏分为四个部分，打开的编辑区，打开的文件夹(途中为markdown文件夹)，大纲，时间线。</p>
<ul>
<li>打开的编辑器：也就是右侧的编辑区域的窗口</li>
<li>打开的文件夹：文件管理区，创建的文件和文件夹都在这里</li>
<li>大纲：我们写的md文件的大纲</li>
<li>时间线：提供我们修改文件的记录，比如昨天修改文件，5分钟前修改文件等等。</li>
</ul>
</li>
<li><p>顶部栏分为两个部分左侧为窗口，右侧有两个按钮，第一个按钮为实时解析预览md文件，第二个为向右拆分窗口，也就是打开两个编辑markdown文件的窗口。</p>
</li>
<li><p>编辑区：当我们点击第一个按钮时(带有放大镜的图标)比如这就是一个正常的编辑markdown文档时的状态，左侧编辑markdown文档，右侧查看实时渲染的结果</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230808194754.png"></p>
<p>并且vscode在编辑区右键可以导出PDF文件</p>
<h1 id="3-Markdown语法"><a href="#3-Markdown语法" class="headerlink" title="3 Markdown语法"></a>3 Markdown语法</h1><h2 id="3-1-标题"><a href="#3-1-标题" class="headerlink" title="3.1 标题"></a>3.1 标题</h2><p>带有不同数量的<code>#</code>为不同标题</p>
<table>
<thead>
<tr>
<th align="center">标题</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">一级标题</td>
<td align="center"><code>&quot;#&quot;+&quot;空格&quot;+&quot;标题&quot;</code></td>
</tr>
<tr>
<td align="center">二级标题</td>
<td align="center"><code>&quot;##&quot;+&quot;空格&quot;+&quot;标题&quot;</code></td>
</tr>
<tr>
<td align="center">三级标题</td>
<td align="center"><code>&quot;###&quot;+&quot;空格&quot;+&quot;标题&quot;</code></td>
</tr>
</tbody></table>
<p>比如<code># 这是一级标题</code>，为了避免标题乱序，这里就不演示了。</p>
<h2 id="3-2换行"><a href="#3-2换行" class="headerlink" title="3.2换行"></a>3.2换行</h2><p>推荐两种方式进行换行：</p>
<ul>
<li>在句子末尾添加两个空格：方便又实用</li>
<li>在句子末尾添加<code>&lt;br&gt;</code></li>
</ul>
<h2 id="3-3-字体"><a href="#3-3-字体" class="headerlink" title="3.3 字体"></a>3.3 字体</h2><table>
<thead>
<tr>
<th align="center">字体</th>
<th align="center">代码</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">粗体</td>
<td align="center"><code>**内容**</code></td>
<td align="center"><strong>这个是粗体</strong></td>
</tr>
<tr>
<td align="center">斜体</td>
<td align="center"><code>*内容*</code></td>
<td align="center"><em>这个是斜体</em></td>
</tr>
<tr>
<td align="center">粗体加斜体</td>
<td align="center"><code>***内容***</code></td>
<td align="center"><em><strong>这个是粗体加斜体</strong></em></td>
</tr>
<tr>
<td align="center">删除线</td>
<td align="center"><code>~~内容~~</code></td>
<td align="center"><del>这里想用删除线</del></td>
</tr>
</tbody></table>
<p>如果想更改字体颜色，字体类型，或者居中显示，那么可以内嵌HTML来实现</p>
<h2 id="3-4-无序列表"><a href="#3-4-无序列表" class="headerlink" title="3.4 无序列表"></a>3.4 无序列表</h2><p>无序列表的使用，在符号<code>-</code>后加空格使用。如下：</p>
<ul>
<li>无序列表 1</li>
<li>无序列表 2</li>
<li>无序列表 3</li>
</ul>
<p>如果要控制列表的层级，则需要在符号<code>-</code>前使用空格。如下：</p>
<ul>
<li>无序列表 1</li>
<li>无序列表 2<ul>
<li>无序列表 2.1</li>
<li>无序列表 2.2</li>
</ul>
</li>
</ul>
<h2 id="3-5-有序列表"><a href="#3-5-有序列表" class="headerlink" title="3.5 有序列表"></a>3.5 有序列表</h2><p>有序列表的使用，在数字及符号<code>.</code>后加空格后输入内容，如下：</p>
<ol>
<li>有序列表 1</li>
<li>有序列表 2</li>
<li>有序列表 3</li>
</ol>
<h2 id="3-6-引用"><a href="#3-6-引用" class="headerlink" title="3.6 引用"></a>3.6 引用</h2><p>引用的格式是在符号<code>&gt;</code>后面书写文字。如下：</p>
<blockquote>
<p>我没说过这句话。 ——鲁迅</p>
</blockquote>
<h2 id="3-7-超链接"><a href="#3-7-超链接" class="headerlink" title="3.7 超链接"></a>3.7 超链接</h2><ul>
<li>比如想要链接我的博客，则输入<code>[“灵能相谈所”](mobbu.space)</code>的效果如下：<br><a href="mobbu.space">“灵能相谈所”</a><br>其中方框内为链接的名称，括号内为你的网址。</li>
<li>其实编译器会默认将网址编译为超链接比如<a href="http://www.google.com/">www.google.com</a><br>如果你不想网址变成超链接，那么你可以用 ` ` 将网址包含进来，比如<code>www.google.com</code></li>
</ul>
<h2 id="3-8-插入图片"><a href="#3-8-插入图片" class="headerlink" title="3.8 插入图片"></a>3.8 插入图片</h2><ul>
<li><p>语法：<code>![图片名](图片链接)</code></p>
</li>
<li><p>图片名为你想给图片起的别名，也可为空。图片链接可以为本地链接，也可以是网上的图片链接，如果是本地链接，那么当你的md文档上传到网站或者移动到其他位置你的图片都可能失效，此时最好使用网上链接。我也有做过免费的github图床建立的教程-&gt;<a href="https://mobbu.space/2023/08/03/20230803_blog%E7%BD%91%E7%AB%99/">github图床建立</a>中的第5节就是相关教程。</p>
</li>
<li><p>示例：比如以下图片插入示例</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/mob_base_2.jpg"></p>
<ul>
<li>如果你想对图片做进一步调整，这时也可以使用html内嵌进行修改，比如想使图片居中显示，指定大小，输入如下代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div img align = center&gt;&lt;src = &quot;图片链接&quot; width = 500&gt;&lt;!div&gt;</span><br></pre></td></tr></table></figure>
其中width就是调整大小，会按照比例缩放大小，大小为像素多少，以下为上述图片的修改效果。</li>
</ul>
<div  align = center><img src = "https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/mob_base_2.jpg" width = 500></div>

<p>通过上述修改我们可以获得合适大小，合适位置的图片。</p>
<h2 id="3-9-分割线"><a href="#3-9-分割线" class="headerlink" title="3.9 分割线"></a>3.9 分割线</h2><ul>
<li><p>语法：<code>---</code></p>
</li>
<li><p>示例：</p>
</li>
</ul>
<p>这是一条分割线</p>
<hr>
<h2 id="3-10-表格"><a href="#3-10-表格" class="headerlink" title="3.10 表格"></a>3.10 表格</h2><ul>
<li>语法：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|属性1|属性2|属性3|</span><br><span class="line">|--:|:-:|:--|</span><br><span class="line">|属性1的值|属性2的值|属性3的值|</span><br><span class="line">|梨子梨子梨子梨子|梨子梨子梨子梨子|梨子梨子梨子梨子|</span><br></pre></td></tr></table></figure></li>
<li>示例：比如就是刚刚的语法中显示的</li>
</ul>
<table>
<thead>
<tr>
<th align="right">属性1</th>
<th align="center">属性2</th>
<th align="left">属性3</th>
</tr>
</thead>
<tbody><tr>
<td align="right">属性1的值</td>
<td align="center">属性2的值</td>
<td align="left">属性3的值</td>
</tr>
<tr>
<td align="right">梨子梨子梨子梨子</td>
<td align="center">梨子梨子梨子梨子</td>
<td align="left">梨子梨子梨子梨子</td>
</tr>
</tbody></table>
<p>第一行为属性名字，第二行为靠右显示<code>--:</code>，居中显示<code>:-:</code>，靠右显示<code>:--</code></p>
<h2 id="3-11-代码"><a href="#3-11-代码" class="headerlink" title="3.11 代码"></a>3.11 代码</h2><ul>
<li>语法：<ul>
<li>输入` 代码` 为行中嵌入代码，</li>
<li>使用：如下代码为单独嵌入，并且可以在第一行输入想高亮的代码比如C语言输入C即可<br>```C<br>代码<br>```</li>
</ul>
</li>
<li>示例<ul>
<li>行中嵌入：<code>printf(&quot;hello world&quot;);</code></li>
<li>单独嵌入：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="3-12-数学公式"><a href="#3-12-数学公式" class="headerlink" title="3.12 数学公式"></a>3.12 数学公式</h2><ul>
<li>语法：单独嵌入<code>$$数学公式$$</code>或者行内嵌入<code>$数学公式$</code></li>
<li>示例:<ul>
<li>单独嵌入:<code>$$H(D_2) = -\left(\frac&#123;2&#125;&#123;4&#125;\log_2 \frac&#123;2&#125;&#123;4&#125; + \frac&#123;2&#125;&#123;4&#125;\log_2 \frac&#123;2&#125;&#123;4&#125;\right) = 1$$</code><br>$$H(D_2) &#x3D; -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) &#x3D; 1$$</li>
<li>行内嵌入：<code>$H(D_2) = -\left(\frac&#123;2&#125;&#123;4&#125;\log_2 \frac&#123;2&#125;&#123;4&#125; + \frac&#123;2&#125;&#123;4&#125;\log_2 \frac&#123;2&#125;&#123;4&#125;\right) = 1$</code>比如$H(D_2) &#x3D; -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) &#x3D; 1$</li>
</ul>
</li>
<li>数学公式编辑功能十分强大，运用得好在公式编辑方面十分方便。具体还有很多语法，比如各种复杂符号的写法比如累加累乘，矩阵的写法等，可以参考以下博客 <a href="https://blog.csdn.net/m0_37769093/article/details/107732606">markdown公式编辑</a>，总结得非常全面。</li>
</ul>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>以上就是markdown的一些基本用法，主要还是要养成记录的习惯，如果你有制作网站或者查阅观看论文的需求的话，markdown可以说是十分有用了。</p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>MobaXterm简单教程</title>
    <url>/2023/08/07/20230807_shelToolMobaXterm/</url>
    <content><![CDATA[<p>日常开发中一个好用的终端软件是很重要的，而MobaXterm就是其中最好用的之一，并且最重要的是MobaXterm的免费版本的功能就十分强大。</p>
<p>本博客会介绍MobaXterm的下载，界面和简单的使用方法，还有其中的一些工具的介绍。</p>
<span id="more"></span>

<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h1><p>官方网址链接为 <a href="https://mobaxterm.mobatek.net/">MobaXterm官方网址</a> ,点击下载即可。</p>
<p>MobaXterm分为两种安装模式：</p>
<p>便携式exe文件：适合安装在U盘，双击即可运行，这样服务器账号密码什么的就很方便的管理了，出门在外只需要一个U盘就可以连接服务器。<br>安装式：正常的install安装步骤。</p>
<h1 id="2-界面介绍"><a href="#2-界面介绍" class="headerlink" title="2 界面介绍"></a>2 界面介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807203546.png"></p>
<p>安装打开后大概可以看到是上图的界面，可以看到主要分为三块，图中用不同颜色的框进行标注。</p>
<p>红色框内是一些我们可能用到的工具，比如session，serbers，tools，还有设置settings等。</p>
<p>蓝色框内是侧边栏，比如我们最常用的通过sessions保存的远程SSH连接服务器的列表会存放在蓝色区域，方便经常连接使用还有tools工具和macros录制脚本。</p>
<p>绿色框内是我们操作的区域，默认是途中这些西汉时的界面，如果我们打开远程服务器，终端也是显示在绿色方框内，这里面最常用红的Start local terminal和recover previous sessions也是最常用的两个功能，分别是打开本地终端和打开最近的session。</p>
<h1 id="3-功能介绍"><a href="#3-功能介绍" class="headerlink" title="3 功能介绍"></a>3 功能介绍</h1><h2 id="3-1-Session管理"><a href="#3-1-Session管理" class="headerlink" title="3.1 Session管理"></a>3.1 Session管理</h2><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807210026.png"></p>
<p>点击上图中的session按键，会出现以下界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807210158.png"></p>
<p>可以看到session中可以新建SSH，Telnet，Rsh，RDP，FTP，SFTP，Shell等功能，需要用到这些功能的时候就点击进行进一步的设置即可。其中我们最常用的就是SSH啦。</p>
<h2 id="3-2-SSH连接远程服务器"><a href="#3-2-SSH连接远程服务器" class="headerlink" title="3.2 SSH连接远程服务器"></a>3.2 SSH连接远程服务器</h2><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807210843.png"></p>
<p>按照3.1中步骤，点击SSH可以看到如上图所示，其中需要填写的一般只有四个部分。</p>
<ul>
<li><code>Remote host</code>：填写服务器的IP地址</li>
<li><code>specify username</code>：填写你在服务器中使用的用户的名称，这样连接服务器后就可以直接登录到你的账户</li>
<li><code>Advanced SSH setting</code>：高级SSH设置，点击之后界面如下，填写Use private key，也就是服务器的密码<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807211553.png"></li>
<li><code>Bookmark settings</code>，书签设置，也就是在侧边栏中，当我们需要连接的服务器较多时，我们可以给不同的服务器起别名区别，填写Session name为我们想要的名字。<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807211752.png"></li>
</ul>
<p>都设置完毕后点击ok就可以了，这样在主界面的侧边栏中就会出现我们想要连接的session，以后方便一键连接远程服务器</p>
<h2 id="3-3-文本编辑器和文本对比"><a href="#3-3-文本编辑器和文本对比" class="headerlink" title="3.3 文本编辑器和文本对比"></a>3.3 文本编辑器和文本对比</h2><p>侧边栏tools-&gt;MobaTExtEditor和tools-&gt;MobaDiff</p>
<p>打开tools-&gt;MobaTExtEditor，就会显示右侧红框中的界面，方便对本地或者远程的文档进行编辑</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212100.png"></p>
<p>打开tools-&gt;MobaDiff，选择文件1和文件2，点击ok即可分析两个文档之间的区别。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212248.png"></p>
<h2 id="3-4-录制操作脚本"><a href="#3-4-录制操作脚本" class="headerlink" title="3.4 录制操作脚本"></a>3.4 录制操作脚本</h2><p>点击侧边栏的macro的如下图的红色框，即可开始录制，</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212442.png"></p>
<p>点击录制后，会显示以下界面，点击停止就会提醒我们保存脚本，做一些重复性工作时，可以录制获得脚本然后以后就可以使用该脚本宏啦</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212547.png"></p>
<h2 id="3-5-本地服务器"><a href="#3-5-本地服务器" class="headerlink" title="3.5 本地服务器"></a>3.5 本地服务器</h2><p>某些情况下，我们需要搭建自己本地的服务器，以方便通过http或ftp等协议传输本地文件或数据，MobaXterm就提供了实现该服务的功能，包括了HTTP、FTP、Telent等众多的协议。</p>
<p>点击上方的servers按钮即可打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807213112.png"></p>
<p>然后选择需要共享的文件夹路径，点击HTTP的开始按钮之后输入访问 <a href="http://localhost/">http://localhost:80/</a>即可访问该文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807213423.png"></p>
<h2 id="3-6-小游戏"><a href="#3-6-小游戏" class="headerlink" title="3.6 小游戏"></a>3.6 小游戏</h2><p>上方按钮中有games选项，里面有一些经典的小游戏，适合上班摸鱼的时候使用</p>
<h1 id="4-使用技巧"><a href="#4-使用技巧" class="headerlink" title="4 使用技巧"></a>4 使用技巧</h1><h2 id="4-1-多种终端同时管理"><a href="#4-1-多种终端同时管理" class="headerlink" title="4.1 多种终端同时管理"></a>4.1 多种终端同时管理</h2><p>MobaXterm也可以使用Git，当我们同时需要使用Git Bash和远程服务器的时候，坚持切换会很麻烦，这时可以在首页右键点击Git Bash就可以在MobaXterm中同时管理多种终端啦。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807213746.png"></p>
<h2 id="4-2-SSH-休眠管理"><a href="#4-2-SSH-休眠管理" class="headerlink" title="4.2 SSH 休眠管理"></a>4.2 SSH 休眠管理</h2><p>默认设置5分钟连接的SSH会自动休眠，如果想要长时间不休眠可以在Settings-&gt;SSH-&gt;SSH keepalive修改，勾上该选项即可，如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807214018.png"></p>
<p><strong>持续更新中…</strong></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>MobaXterm</tag>
        <tag>shell</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>steam一键切换用户的脚本</title>
    <url>/2023/08/08/20230808_steamUserChangebat/</url>
    <content><![CDATA[<p>由于博主经常用很多不同的号玩CSGO，每一次都需要输入账号密码，并且等待令牌，十分麻烦，遂找到了一个脚本切换steam登录信息，其实steam++也可以实现这个功能，但是毕竟很多时候是借其他人的号，有泄露密码风险的还是不好。</p>
<p>原理就是Steam的默认登录账号是写在注册表的，然后会根据注册表账号去Steam&#x2F;config&#x2F;loginusers.vdf找对应账号信息，所以切换用户的时候把注册表修改到对应的账号就可以了。</p>
<span id="more"></span>

<p>首先你需要登陆过一次你记录的账户，并且选择记住密码登录。这样你的本地就会保存对应的账号信息，此时就可以使用脚本修改到对应的账号就可以了。</p>
<h1 id="1-创建脚本并修改"><a href="#1-创建脚本并修改" class="headerlink" title="1 创建脚本并修改"></a>1 创建脚本并修改</h1><p>新建脚本文件ChangeSteamAccount.bat，输入以下代码：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">taskkill</span> /f /im steam.exe</span><br><span class="line"><span class="built_in">taskkill</span> /f /im SteamService.exe</span><br><span class="line"><span class="built_in">echo</span> 请输入你要登录的账号(<span class="number">1</span>.妹妹<span class="number">1</span>；<span class="number">2</span>.妹妹<span class="number">2</span>；<span class="number">3</span>.妹妹<span class="number">3</span>)：</span><br><span class="line"><span class="built_in">set</span> /p area=</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">1</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account1 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">2</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account2 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">3</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account3 /f)</span><br><span class="line"><span class="built_in">start</span> D:\Steam\Steam.exe</span><br></pre></td></tr></table></figure>

<p>接下来你需要对上述代码中的对应部分进行修改</p>
<ol>
<li>在上述代码中的第四行，也就是以下这一行代码进行修改，将括号中的文字修改为你想要提示的语句，比如我这里有三个妹妹的号，我就可以标记为妹妹1，妹妹2，妹妹3.</li>
</ol>
<p><code>echo 请输入你要登录的账号(1.妹妹1；2.妹妹2；3.妹妹3)：</code></p>
<ol start="2">
<li><p>在上述代码的第5，6，7行，修改if判断语句中的Account1，Account2，Account3为你想修改的账号的steam登录名，就比如上面的妹妹1的steam名字为meiyangyang，那么就把Account1修改为meiyangyang就可以了。</p>
</li>
<li><p>修改第8行，将路径修改为你的steam路径即可，路径可以通过<code>右键steam快捷键-&gt;快捷键方式-&gt;目标</code>找到。</p>
</li>
<li><p>如果想添加更多的号，直接类推上述操作即可，比如想添加妹妹4，那么代码如下：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">taskkill</span> /f /im steam.exe</span><br><span class="line"><span class="built_in">taskkill</span> /f /im SteamService.exe</span><br><span class="line"><span class="built_in">echo</span> 请输入你要登录的账号(<span class="number">1</span>.妹妹<span class="number">1</span>；<span class="number">2</span>.妹妹<span class="number">2</span>；<span class="number">3</span>.妹妹<span class="number">3</span>；妹妹<span class="number">4</span>)：</span><br><span class="line"><span class="built_in">set</span> /p area=</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">1</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account1 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">2</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account2 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">3</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account3 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">4</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account4 /f)</span><br><span class="line"><span class="built_in">start</span> D:\Steam\Steam.exe</span><br></pre></td></tr></table></figure>
<p>其中修改了第四行，然后添加了一个if判断，记得将if判断中的area判断值修改为4，将Account4修改为你想要的名字。</p>
</li>
<li><p>可能会出现乱码情况，此时需要将你文本编辑的编码方式从UTF-8修改为ANSI，直接另存为文件，选择编码方式为ANSI即可解决问题</p>
</li>
</ol>
<h1 id="2-实操演示"><a href="#2-实操演示" class="headerlink" title="2 实操演示"></a>2 实操演示</h1><p>如下图为打开后的界面，由于我此时打开的电脑没有安装steam，所以第一行第二行错误，其实这两行错误不用管，此时只需要输入你想登录的账号的序号就可以，比如我想登录妹妹1的账号，此时只需要输入1，按下回车即可登录。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230808105819.png"></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>steam</tag>
        <tag>bat脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>超好用网站汇总</title>
    <url>/2023/08/09/20230809_PerfectWebsiteSummary/</url>
    <content><![CDATA[<p>总结分享自己常用的一些好用网站</p>
<span id="more"></span>

<h1 id="1-比价网站"><a href="#1-比价网站" class="headerlink" title="1 比价网站"></a>1 比价网站</h1><p><a href="https://tool.manmanbuy.com/">比价网站</a></p>
<p>这个网站可以查询过去24个月的价格波动，在网购之前都可以复制链接进来进行比价后再决定是否购买，减少背刺的概率。</p>
<h1 id="2-mp3免费音乐资源网站"><a href="#2-mp3免费音乐资源网站" class="headerlink" title="2 mp3免费音乐资源网站"></a>2 mp3免费音乐资源网站</h1><p><a href="https://tools.liumingye.cn/music/">MyFreeMP3</a></p>
<p>一个免费的下载高质量的mp3格式歌曲的网站，一些常见的比较热门的歌曲都有，不过新歌可能上传比较慢。</p>
<p><a href="https://tonzhon.com/">铜钟</a></p>
<p>也一个免费的下载高质量的mp3格式歌曲的网站，博主一般交叉使用。</p>
<h1 id="3-图片压缩和转换分辨率网站"><a href="#3-图片压缩和转换分辨率网站" class="headerlink" title="3 图片压缩和转换分辨率网站"></a>3 图片压缩和转换分辨率网站</h1><p><a href="https://www.onlineimagetool.com/zh/resize-png-jpg-webp-gif">图片压缩和转换分辨率网站</a></p>
<p>可以免费在线批量压缩图片，调整图片的分辨率，在需要上传一些证件照时十分有用。</p>
<h1 id="4-学习代码算法结构网站"><a href="#4-学习代码算法结构网站" class="headerlink" title="4 学习代码算法结构网站"></a>4 学习代码算法结构网站</h1><p><a href="https://programmercarl.com/">代码随想录</a></p>
<p>学习代码算法，主要是C++，总结的不错。</p>
<h1 id="5-电子书网站"><a href="#5-电子书网站" class="headerlink" title="5 电子书网站"></a>5 电子书网站</h1><p><a href="http://jiumodiary.com/">鸠摩搜书</a></p>
<p>相对资源还算比较多，自己也经常在上面搜索一些txt，pdf，当然主要是epub格式的书籍。</p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>分享博客</category>
      </categories>
      <tags>
        <tag>实用工具</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习路线</title>
    <url>/2023/08/22/20230819_C++LearningRoute/</url>
    <content><![CDATA[<p>记录一下打工牛马人的C++的学习路线。</p>
<p>主要部分有C++基础，C++算法，计算机网络，MySQL数据库，Redis，软件设计模式，操作系统、Linux操作、网络编程，C++经典项目(webserver)，如果有时间还可以多参与几个练手的小项目。</p>
<span id="more"></span>

<h1 id="C-基础"><a href="#C-基础" class="headerlink" title="C++基础"></a>C++基础</h1><p><strong>视频链接：</strong><br><a href="https://www.bilibili.com/video/BV1et411b73Z/">黑马程序员C++基础</a><br><strong>我的笔记链接：</strong><a href="https://www.cnblogs.com/mobbu/p/17560955.html">C++基础笔记</a></p>
<p>主要是三部分内容</p>
<ul>
<li>C++语法入门：变量与常量、数据类型、运算符、程序流程结构、数组、函数、指针、结构体</li>
<li>类和对象：封装、继承、多态</li>
<li>模板与STL</li>
</ul>
<h1 id="C-算法"><a href="#C-算法" class="headerlink" title="C++算法"></a>C++算法</h1><p>主要在代码随想录上刷题和学习：<a href="https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC.html#%E9%A2%98%E5%A4%96%E8%AF%9D">代码随想录</a></p>
<p>有时间可以刷两道三遍，不然理解可能不到位</p>
<p>主要包含：</p>
<table>
<thead>
<tr>
<th align="center">内容</th>
<th align="center">难度</th>
<th align="center">内容</th>
<th align="center">面试&#x2F;笔试较多</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数组</td>
<td align="center">简单</td>
<td align="center">数组相关</td>
<td align="center">面试多</td>
</tr>
<tr>
<td align="center">链表</td>
<td align="center">简单</td>
<td align="center">链表概念、设计、删除等</td>
<td align="center">面试多</td>
</tr>
<tr>
<td align="center">哈希表</td>
<td align="center">简单</td>
<td align="center">快速判断一个元素是否出现集合里</td>
<td align="center">一般</td>
</tr>
<tr>
<td align="center">字符串</td>
<td align="center">简单</td>
<td align="center">针对字符，使用双指针很多</td>
<td align="center">一般</td>
</tr>
<tr>
<td align="center">双指针法</td>
<td align="center">简单</td>
<td align="center">数组，链表，字符串中使用较多</td>
<td align="center">笔试&#x2F;面试</td>
</tr>
<tr>
<td align="center">栈与队列</td>
<td align="center">简单</td>
<td align="center">面试提问较多</td>
<td align="center">笔试&#x2F;面试</td>
</tr>
<tr>
<td align="center">二叉树</td>
<td align="center">中等</td>
<td align="center">二叉树，搜索树，遍历等</td>
<td align="center">笔试&#x2F;面试</td>
</tr>
<tr>
<td align="center">回溯算法</td>
<td align="center">中等</td>
<td align="center">暴力算法，组合</td>
<td align="center">笔试&#x2F;面试</td>
</tr>
<tr>
<td align="center">贪心算法</td>
<td align="center">困难</td>
<td align="center">局部最优推广到全局</td>
<td align="center">笔试</td>
</tr>
<tr>
<td align="center">动态规划</td>
<td align="center">困难</td>
<td align="center">能够定义dp数据，当前状态由前两个状态决定</td>
<td align="center">笔试</td>
</tr>
</tbody></table>
<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><strong>视频链接：</strong><br><a href="https://www.bilibili.com/video/BV1c4411d7jb/">计算机网络(湖科大教书匠)</a><br><strong>我的笔记链接：</strong><a href="https://www.cnblogs.com/mobbu/p/17577514.html">计算机网络笔记</a></p>
<p>此部分比较简单，并且在后序网络编程还会复习一部分，笔记只记录了一些相对重要的部分。</p>
<h1 id="MySQL和Redis"><a href="#MySQL和Redis" class="headerlink" title="MySQL和Redis"></a>MySQL和Redis</h1><h2 id="MySQL：一般学习这个"><a href="#MySQL：一般学习这个" class="headerlink" title="MySQL：一般学习这个"></a>MySQL：一般学习这个</h2><p><strong>视频链接：</strong><br><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru/">黑马程序员MySQL</a><br><strong>我的笔记链接：</strong><a href="https://www.cnblogs.com/mobbu/p/17648671.html">SQL基础增删改查</a></p>
<h2 id="Redis：岗位有需要可以一周内突击学习"><a href="#Redis：岗位有需要可以一周内突击学习" class="headerlink" title="Redis：岗位有需要可以一周内突击学习"></a>Redis：岗位有需要可以一周内突击学习</h2><p><strong>视频链接：</strong><br><a href="https://www.bilibili.com/video/BV1cr4y1671t/">黑马程序员Redis</a><br><strong>我的笔记链接：</strong></p>
<h1 id="软件设计模式"><a href="#软件设计模式" class="headerlink" title="软件设计模式"></a>软件设计模式</h1><p>有时间看视频，没时间直接搜索资料记住概念和常见的几种设计模式即可</p>
<p><strong>视频链接：</strong> 讲的挺好，有时间可以仔细听，对程序编写有好处<br><a href="https://www.bilibili.com/video/BV1Yr4y157Ci/">C++设计模式入门</a><br><strong>我的笔记链接：</strong><a href="https://www.cnblogs.com/mobbu/p/17559583.html">一些常用软件设计模式</a></p>
<p>一般了解策略模式、工厂模式、单例模式(最简单)、观察者模式、适配这模式即可了</p>
<h1 id="C-项目"><a href="#C-项目" class="headerlink" title="C++项目"></a>C++项目</h1><p><a href="https://www.nowcoder.com/study/live/504">牛客网C++项目</a></p>
<p>这个项目就包含了基础的Linux系统编程、Linux多进程开发、Linux多线程开发、网络编程和实战。所以如果时间不够可以就看着一个项目就好了。包含了<strong>Linux基础</strong>、<strong>操作系统</strong>、<strong>网络编程</strong>和<strong>websever</strong>项目，差的知识后序查漏补缺就好了。</p>
<p>笔记链接如下：</p>
<p><a href="https://www.cnblogs.com/mobbu/p/17547122.html">第1章 Linux系统编程入门</a></p>
<p><a href="https://www.cnblogs.com/mobbu/p/17586114.html">第2章 Linux多进程开发</a></p>
<p><a href="https://www.cnblogs.com/mobbu/p/17601631.html">第3章 Linux多线程开发</a></p>
<p><a href="https://www.cnblogs.com/mobbu/p/17609639.html">第4章 Linux网络编程</a></p>
<p><a href="https://www.cnblogs.com/mobbu/p/17629592.html">第5章 项目实战与总结</a></p>
<p><a href="https://mobbu.space/2023/08/15/20230815_C++%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/#more">webserver项目解析与总结</a></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>分享博客</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>git教程和分布式管理代码</title>
    <url>/2023/08/21/20230821_GitAbout/</url>
    <content><![CDATA[<p>当我们写了一定量的代码之后，就会遇到如何管理代码的问题。目前管理代码主要有两种管理工具分别是</p>
<ul>
<li>Git：分布式管理</li>
<li>SVN：集中式管理</li>
</ul>
<p>那么分布式管理有哪些好处呢？我目前感受到的优点如下：</p>
<ul>
<li>管理代码成本低</li>
<li>分支branch机制让主干代码很简洁移动</li>
<li>可以回滚和查看之前commit的任意版本，这个在实际中十分有用</li>
<li>分支机制让多人协同修改代码更加方便</li>
<li>可以在不同电脑上轻松同步项目代码</li>
</ul>
<p>下面主要介绍Git的一些基本用法。</p>
<span id="more"></span>

<p>首先贴上官方资料<a href="https://git-scm.com/book/zh/v2/">Pro Git(2nd Edition)</a></p>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h1><h2 id="1-1-三种状态"><a href="#1-1-三种状态" class="headerlink" title="1.1 三种状态"></a>1.1 三种状态</h2><ul>
<li>已提交（committed）：已提交表示数据已经安全地保存在本地数据库中。</li>
<li>已修改（modified）：已修改表示修改了文件，但还没保存到数据库中。</li>
<li>已暂存（staged）：已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
</ul>
<h2 id="1-2-工作流程"><a href="#1-2-工作流程" class="headerlink" title="1.2 工作流程"></a>1.2 工作流程</h2><ul>
<li><p>在工作区中修改文件。</p>
</li>
<li><p>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</p>
</li>
<li><p>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</p>
</li>
</ul>
<p>如果 Git 目录中保存着特定版本的文件，就属于 已提交 状态。 如果文件已修改并放入暂存区，就属于 已暂存 状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是 已修改 状态。 在 Git 基础 一章，你会进一步了解这些状态的细节， 并学会如何根据文件状态实施后续操作，以及怎样跳过暂存直接提交。</p>
<h1 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2 基本操作"></a>2 基本操作</h1><p>一个基本操作流程如下：<br>首先你有一个github的库，公有私有都可以。</p>
<ol>
<li>github上的库clone到本地</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:xxx.git</span><br></pre></td></tr></table></figure>

<p>在github上建库之后，输入代码git clone到本地仓库</p>
<ol start="2">
<li><p><code>git init</code>初始化生成.git文件夹</p>
</li>
<li><p>本地进行修改后，<code>git add .</code>将所有修改添加到缓存区，此时处于已修改的状态</p>
</li>
<li><p><code>git commit -am &quot;修改的提示信息&quot;</code>将修改的信息提交到本地仓库</p>
</li>
<li><p><code>git push</code>将修改的信息push到云端也就是github的仓库中</p>
</li>
</ol>
<p>一些常用Git命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log		        //查看提交日志</span><br><span class="line">git add		        //提交到缓存区</span><br><span class="line">git reset 	        //撤销缓存区</span><br><span class="line">git commit 	        //提交代码到本地仓库</span><br><span class="line">git push			//提交代码到远程仓库</span><br><span class="line">git pull			//拷贝远程仓库的代码</span><br><span class="line">git checkout		//回退文件修改或者切换分支</span><br><span class="line">git stash			//暂存本地修改</span><br><span class="line">git stash pop		//释放第一个暂存区代码</span><br><span class="line">git diff			//查看本地具体修改，通常用于生成补丁</span><br><span class="line">git format-patch	//将本地提交生成补丁</span><br><span class="line">git revert			//回滚一个提交</span><br><span class="line">git cherry-pick		//下载远程仓库的某个提交</span><br><span class="line">git show			//查看具体修改</span><br><span class="line">git status			//查看所有修改文件</span><br></pre></td></tr></table></figure>


<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>webserver项目</title>
    <url>/2023/08/15/20230815_C++HighConcurrencyWeberver/</url>
    <content><![CDATA[<p>牛客网经典之webserver项目学习总结记录，其中主要包括了：</p>
<ul>
<li>使用多线程模型，利用信号量实现线程间加锁；</li>
<li>利用I0复用技术Epoll与线程池实现多线程的Reactor高并发模型；</li>
<li>利用RAII机制实现了数据库连接池，减少数据库连接建立与关闭的开销；</li>
<li>利用正则与状态机解析 HTTP请求报文实现处理静态资源的请求；</li>
<li>基于小根堆实现的定时器，关闭超时的非活动连接；</li>
<li>服务器压力测试；</li>
<li>项目总结<span id="more"></span></li>
</ul>
<h1 id="1-总体介绍"><a href="#1-总体介绍" class="headerlink" title="1 总体介绍"></a>1 总体介绍</h1><h2 id="1-1-项目需求"><a href="#1-1-项目需求" class="headerlink" title="1.1 项目需求"></a>1.1 项目需求</h2><p>实现一个高性能的 Web Server， 就是一个服务器软件（程序）。其主要功能是通过 HTTP 协议与客户端进行通信，来接收，存储，处理来自客户端的 HTTP 请求，并对其请求做出 HTTP 响应，返回给客户端其请求的内容或返回一个 Error 信息。</p>
<h2 id="1-2-项目主要内容"><a href="#1-2-项目主要内容" class="headerlink" title="1.2 项目主要内容"></a>1.2 项目主要内容</h2><ol>
<li>使用多线程模型，利用信号量实现线程间加锁</li>
<li>利用I0复用技术Epoll与线程池实现多线程的Reactor高并发模型</li>
<li>利用RAⅡ机制实现了数据库连接池，减少数据库连接建立与关闭的开销</li>
<li>利用正则与状态机解析 HTTP请求报文实现处理静态资源的请求</li>
<li>基于小根堆实现的定时器，关闭超时的非活动连接</li>
<li>服务器压力测试</li>
</ol>
<h1 id="2-信号量加锁和多线程模型"><a href="#2-信号量加锁和多线程模型" class="headerlink" title="2 信号量加锁和多线程模型"></a>2 信号量加锁和多线程模型</h1><p>由于使用多线程模型，则需要使用到锁，保证同时只有一个线程对文件fd进行操作，通过信号来对线程间进行交互，使用条件量来进一步控制线程。</p>
<p>封装locker.h头文件，创建locker类、条件变量类cond和信号量类sem。</p>
<h2 id="2-1-locker类"><a href="#2-1-locker类" class="headerlink" title="2.1 locker类"></a>2.1 locker类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">locker</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数,如果创建互斥量失败则输出错误原因</span></span><br><span class="line">    <span class="built_in">locker</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_mutex_init</span>(&amp;m_mutex, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数，销毁互斥量m_mutex</span></span><br><span class="line">    ~<span class="built_in">locker</span>() &#123;</span><br><span class="line">        <span class="built_in">pthread_mutex_destroy</span>(&amp;m_mutex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上锁，true为上锁成功</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_lock</span>(&amp;m_mutex) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解锁，true为解锁成功</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_mutex_unlock</span>(&amp;m_mutex) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获得互斥量m_mutex</span></span><br><span class="line">    <span class="function"><span class="type">pthread_mutex_t</span> *<span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;m_mutex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_mutex_t</span> m_mutex;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-条件变量类"><a href="#2-2-条件变量类" class="headerlink" title="2.2 条件变量类"></a>2.2 条件变量类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">cond</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数，如果创建失败则输出错误原因</span></span><br><span class="line">    <span class="built_in">cond</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">pthread_cond_init</span>(&amp;m_cond, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数，销毁条件变量m_cond</span></span><br><span class="line">    ~<span class="built_in">cond</span>() &#123;</span><br><span class="line">        <span class="built_in">pthread_cond_destroy</span>(&amp;m_cond);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阻塞在条件变量上,返回值true则成功</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">(<span class="type">pthread_mutex_t</span> *m_mutex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_wait</span>(&amp;m_cond, m_mutex) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阻塞直到指定时间,返回值true则成功，其中t为时间</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">timewait</span><span class="params">(<span class="type">pthread_mutex_t</span> *m_mutex, <span class="keyword">struct</span> timespec t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_timedwait</span>(&amp;m_cond, m_mutex, &amp;t) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解除在条件变量上的阻塞,返回值true则成功</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_signal</span>(&amp;m_cond) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放阻塞的所有线程,返回值true则成功</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">broadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pthread_cond_broadcast</span>(&amp;m_cond) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">pthread_cond_t</span> m_cond;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-信号量类"><a href="#2-3-信号量类" class="headerlink" title="2.3 信号量类"></a>2.3 信号量类</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sem</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数，如果创建失败则输出错误原因</span></span><br><span class="line">    <span class="built_in">sem</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">sem_init</span>( &amp;m_sem, <span class="number">0</span>, <span class="number">0</span> ) != <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造函数，生成指定信号量值的信号</span></span><br><span class="line">    <span class="built_in">sem</span>(<span class="type">int</span> num) &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">sem_init</span>( &amp;m_sem, <span class="number">0</span>, num ) != <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数，销毁信号</span></span><br><span class="line">    ~<span class="built_in">sem</span>() &#123;</span><br><span class="line">        <span class="built_in">sem_destroy</span>( &amp;m_sem );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待信号量，即对信号量加锁，调用一次对信号量的值-1，如果值为0，就阻塞</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_wait</span>( &amp;m_sem ) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 增加信号量，即对信号量解锁，调用一次对信号量的值+1</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sem_post</span>( &amp;m_sem ) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">sem_t</span> m_sem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="3-IO复用、Epoll和线程池实现Reactor高并发模型"><a href="#3-IO复用、Epoll和线程池实现Reactor高并发模型" class="headerlink" title="3 IO复用、Epoll和线程池实现Reactor高并发模型"></a>3 IO复用、Epoll和线程池实现Reactor高并发模型</h1><h2 id="3-1-IO复用介绍"><a href="#3-1-IO复用介绍" class="headerlink" title="3.1 IO复用介绍"></a>3.1 IO复用介绍</h2><ul>
<li>简单来说就是单线程或单进程同时监测若干个文件描述符是否可以执行IO操作的能力。</li>
</ul>
<h2 id="3-2-Epoll介绍"><a href="#3-2-Epoll介绍" class="headerlink" title="3.2 Epoll介绍"></a>3.2 Epoll介绍</h2><ul>
<li><p>Linux中的IO处理模型一般分为5种，分别是阻塞IO、非阻塞IO、IO多路复用、信号驱动IO、异步IO。本项目中主要是用的是IO多路复用中的Epoll技术。</p>
</li>
<li><p>Linux中多路复用主要分三种</p>
<ul>
<li>select</li>
<li>poll</li>
<li>Epoll</li>
</ul>
</li>
<li><p>epoll相比 select&amp;poll的优点</p>
<ul>
<li>在需要同时监听的文件描述符数量增加时，select&amp;poll是O(N)的复杂度，epoll是O(1)，在N很小的情况下，差距不会特别大，但如果N很大的前提下，一次O(N)的循环可要比O(1)慢很多，所以高性能的网络服务器都会选择epoll进行IO多路复用。</li>
<li>epoll内部用一个文件描述符挂载需要监听的文件描述符，这个epoll的文件描述符可以在多个线程&#x2F;进程共享，所以epoll的使用场景要比select&amp;poll要多。</li>
</ul>
</li>
<li><p>epoll触发方式：</p>
<ul>
<li>水平触发LT(level-triggered)：<br>  evel-triggered表示只要有IO操作可以进行比如某个文件描述符有数据可读，每次调用epoll_wait都会返回以通知程序可以进行IO操作</li>
<li>边缘触发ET(edge-triggered)：<br>  edge-triggered表示只有在文件描述符状态发生变化时，调用epoll_wait才会返回，如果第一次没有全部读完该文件描述符的数据而且没有新数据写入，再次调用epoll_wait都不会有通知给到程序，因为文件描述符的状态没有变化</li>
</ul>
</li>
<li><p>epoll监听事件</p>
<ul>
<li>EPOLLIN：读事件</li>
<li>EPOLLOUT：写事件</li>
<li>EPOLLERR：错误事件</li>
<li>EPOLLET：设置事件为边沿触发</li>
<li>EPOLLONESHOT，只触发一次，事件自动被删除</li>
<li>EPOLLHUP：意味着对等方关闭了连接的结束。对连接的写入是关闭的，在使用了任何(可能的)可读数据之后，从连接读取的数据也会关闭。</li>
<li>EDPOLLRDHUP：只意味着对等方关闭了他们的连接，或者只关闭了一半的连接。如果它只关闭一半，流套接字就会变成单向的、只写的连接.对连接的写入可能仍然是开放的，但是在使用了任何(可能的)可读数据之后，从连接读取的数据就关闭了。</li>
</ul>
</li>
</ul>
<p>在项目中主要运用水平触发监听Epoll，在主函数main中，对事件进行监听EPOLLIN、EPOLLOUT和EPOLLERR等进行检测，并进行相应的操作。</p>
<h2 id="3-3-线程池"><a href="#3-3-线程池" class="headerlink" title="3.3 线程池"></a>3.3 线程池</h2><p>线程池是由服务器预先创建的一组子线程。线程池中的所有子线程都运行着相同的代码。当有新的任务到来时，主线程将通过某种方式选择线程池中的某一个子线程来为之服务。相比与动态的创建子线程，选择一个已经存在的子线程的代价显然要小得多。至于主线程选择哪个子线程来为新任务服务，则有多种方式：</p>
<ul>
<li>主线程使用某种算法来主动选择子线程。最简单、最常用的算法是随机算法和 Round Robin（轮流选取）算法，但更优秀、更智能的算法将使任务在各个工作线程中更均匀地分配，从而减轻服务器的整体压力。</li>
<li>主线程和所有子线程通过一个共享的工作队列来同步，子线程都睡眠在该工作队列上。当有新的任务到来时，主线程将任务添加到工作队列中。这将唤醒正在等待任务的子线程，不过只有一个子线程将获得新任务的接管权，它可以从工作队列中取出任务并执行之，而其他子线程将继续睡眠在工作队列上。</li>
</ul>
<p>线程池的一般模型为：<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230815200641.png"></p>
<blockquote>
<p>线程池中的线程数量最直接的限制因素是CPU的处理器的数量<code>N</code> ：如果你的CPU是4-cores的，对于CPU密集型的任务来说，那线程池中的线程数量最好也设置为4（或者+1防止其他因素造成的线程阻塞）；对于IO密集型的任务，一般要多于CPU的核数，因为线程间竞争的不是CPU的计算资源而是IO，IO的处理一般较慢，多于cores数的线程将为CPU争取更多的任务，不至在线程处理IO的过程造成CPU空闲导致资源浪费。</p>
</blockquote>
<ul>
<li>空间换时间，浪费服务器的硬件资源，换取运行效率。</li>
<li>池是一组资源的集合，这组资源在服务器启动之初就被完全创建好并初始化，这称为静态资源。</li>
<li>当服务器进入正式运行阶段，开始处理客户请求的时候，如果它需要相关的资源，可以直接从池中获取，无需动态分配。</li>
<li>当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用释放资源。</li>
</ul>
<p>创建threadpool.h，封装线程池类threadpool，并且使用模版类方便移植。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程池类，将它定义为模板类是为了代码复用，模板参数T是任务类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">threadpool</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*thread_number是线程池中线程的数量，max_requests是请求队列中最多允许的、等待处理的请求的数量*/</span></span><br><span class="line">    <span class="built_in">threadpool</span>(<span class="type">int</span> thread_number = <span class="number">8</span>, <span class="type">int</span> max_requests = <span class="number">10000</span>);</span><br><span class="line">    ~<span class="built_in">threadpool</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">append</span><span class="params">(T* request)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*工作线程运行的函数，它不断从工作队列中取出任务并执行之*/</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">worker</span><span class="params">(<span class="type">void</span>* arg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 线程的数量</span></span><br><span class="line">    <span class="type">int</span> m_thread_number;  </span><br><span class="line">    <span class="comment">// 描述线程池的数组，大小为m_thread_number    </span></span><br><span class="line">    <span class="type">pthread_t</span> * m_threads;</span><br><span class="line">    <span class="comment">// 请求队列中最多允许的、等待处理的请求的数量  </span></span><br><span class="line">    <span class="type">int</span> m_max_requests;   </span><br><span class="line">    <span class="comment">// 请求队列</span></span><br><span class="line">    std::list&lt; T* &gt; m_workqueue;  </span><br><span class="line">    <span class="comment">// 保护请求队列的互斥锁</span></span><br><span class="line">    locker m_queuelocker;   </span><br><span class="line">    <span class="comment">// 是否有任务需要处理</span></span><br><span class="line">    sem m_queuestat;</span><br><span class="line">    <span class="comment">// 是否结束线程          </span></span><br><span class="line">    <span class="type">bool</span> m_stop;                    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>构造函数<code>threadpool(int thread_number, int max_requests)</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有参构造，设置线程数量m_thread_number和最大请求量 m_max_requests</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line">threadpool&lt; T &gt;::<span class="built_in">threadpool</span>(<span class="type">int</span> thread_number, <span class="type">int</span> max_requests) : </span><br><span class="line">        <span class="built_in">m_thread_number</span>(thread_number), <span class="built_in">m_max_requests</span>(max_requests), <span class="built_in">m_stop</span>(<span class="literal">false</span>), <span class="built_in">m_threads</span>(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// 若线程数或最大请求量小于等于0，则报错</span></span><br><span class="line">    <span class="keyword">if</span>((thread_number &lt;= <span class="number">0</span>) || (max_requests &lt;= <span class="number">0</span>) ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建对应数量的线程</span></span><br><span class="line">    m_threads = <span class="keyword">new</span> <span class="type">pthread_t</span>[m_thread_number];</span><br><span class="line">    <span class="keyword">if</span>(!m_threads) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建thread_number 个线程，并将他们设置为脱离线程。</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; thread_number; ++i ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;create the %dth thread\n&quot;</span>, i);</span><br><span class="line">        <span class="comment">// 创建对应线程，工作函数为worker，并传入参数this，以方便worker调用类中的变量和函数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pthread_create</span>(m_threads + i, <span class="literal">NULL</span>, worker, <span class="keyword">this</span> ) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置为脱离线程</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">pthread_detach</span>( m_threads[i] ) ) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] m_threads;</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>析构函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 销毁线程池</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line">threadpool&lt; T &gt;::~<span class="built_in">threadpool</span>() &#123;</span><br><span class="line">    <span class="keyword">delete</span> [] m_threads;</span><br><span class="line">    m_stop = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>append函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="type">bool</span> threadpool&lt; T &gt;::<span class="built_in">append</span>( T* request )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 操作工作队列时一定要加锁，因为它被所有线程共享。</span></span><br><span class="line">    m_queuelocker.<span class="built_in">lock</span>();<span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">if</span> ( m_workqueue.<span class="built_in">size</span>() &gt; m_max_requests ) &#123;</span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();<span class="comment">//解锁</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_workqueue.<span class="built_in">push_back</span>(request);<span class="comment">//添加请求到工作序列中</span></span><br><span class="line">    m_queuelocker.<span class="built_in">unlock</span>();<span class="comment">//解锁</span></span><br><span class="line">    m_queuestat.<span class="built_in">post</span>();<span class="comment">//传递信号</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工作worker函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="type">void</span>* threadpool&lt; T &gt;::<span class="built_in">worker</span>( <span class="type">void</span>* arg )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 令pool为当前线程池类</span></span><br><span class="line">    threadpool* pool = ( threadpool* )arg;</span><br><span class="line">    <span class="comment">// 运行</span></span><br><span class="line">    pool-&gt;<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行run函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="type">void</span> threadpool&lt; T &gt;::<span class="built_in">run</span>() &#123;</span><br><span class="line">    <span class="keyword">while</span> (!m_stop) &#123;<span class="comment">//当m_stop不为空时</span></span><br><span class="line">        m_queuestat.<span class="built_in">wait</span>(); <span class="comment">//等待信号量，信号量-1，阻塞</span></span><br><span class="line">        m_queuelocker.<span class="built_in">lock</span>();<span class="comment">// 工作序列加锁</span></span><br><span class="line">        <span class="keyword">if</span> ( m_workqueue.<span class="built_in">empty</span>() ) &#123;<span class="comment">//工作序列为空时，continue</span></span><br><span class="line">            m_queuelocker.<span class="built_in">unlock</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出工作序列的第一个</span></span><br><span class="line">        T* request = m_workqueue.<span class="built_in">front</span>();</span><br><span class="line">        m_workqueue.<span class="built_in">pop_front</span>();</span><br><span class="line">        m_queuelocker.<span class="built_in">unlock</span>();<span class="comment">// 工作序列加锁，此时对request进行工作</span></span><br><span class="line">        <span class="keyword">if</span> ( !request ) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 线程进行工作，调用request的工作函数，具体封装在http解析中</span></span><br><span class="line">        request-&gt;<span class="built_in">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-Reactor模型"><a href="#3-4-Reactor模型" class="headerlink" title="3.4 Reactor模型"></a>3.4 Reactor模型</h2><p>服务器程序通常需要处理三类事件：I&#x2F;O 事件、信号及定时事件。有两种高效的事件处理模式：Reactor和 Proactor，同步 I&#x2F;O 模型通常用于实现 Reactor 模式，异步 I&#x2F;O 模型通常用于实现 Proactor 模式。</p>
<p>要求主线程（I&#x2F;O处理单元）只负责监听文件描述符上是否有事件发生，有的话就立即将该事件通知工作线程（逻辑单元），将 socket 可读可写事件放入请求队列，交给工作线程处理。除此之外，主线程不做任何其他实质性的工作。读写数据，接受新的连接，以及处理客户请求均在工作线程中完成。<br>使用同步 I&#x2F;O（以 epoll_wait 为例）实现的 Reactor 模式的工作流程是：</p>
<ol>
<li>主线程往 epoll 内核事件表中注册 socket 上的读就绪事件。</li>
<li>主线程调用 epoll_wait 等待 socket 上有数据可读。</li>
<li>当 socket 上有数据可读时， epoll_wait 通知主线程。主线程则将 socket 可读事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它从 socket 读取数据，并处理客户请求，然后往 epoll<br>内核事件表中注册该 socket 上的写就绪事件。</li>
<li>当主线程调用 epoll_wait 等待 socket 可写。</li>
<li>当 socket 可写时，epoll_wait 通知主线程。主线程将 socket 可写事件放入请求队列。</li>
<li>睡眠在请求队列上的某个工作线程被唤醒，它往 socket 上写入服务器处理客户请求的结果。</li>
</ol>
<p>Reactor 模式的工作流程：<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230815193855.png"></p>
<h1 id="4-RAⅡ机制"><a href="#4-RAⅡ机制" class="headerlink" title="4 RAⅡ机制"></a>4 RAⅡ机制</h1><p>RAII（Resource Acquisition Is Initialization）中文翻译为资源获取即初始化：使用局部对象来管理资源的技术称为资源获取即初始化；这里的资源主要是指操作系统中有限的东西如内存、网络套接字等等，局部对象是指存储在栈的对象，它的生命周期是由操作系统来管理的，无需人工介入；</p>
<p>资源的使用一般经历三个步骤a.获取资源 b.使用资源 c.销毁资源，但是资源的销毁往往是程序员经常忘记的一个环节，所以程序界就想如何在程序员中让资源自动销毁呢</p>
<p>整个RAII过程总结四个步骤：</p>
<ol>
<li><p>设计一个类封装资源</p>
</li>
<li><p>在构造函数中初始化</p>
</li>
<li><p>在析构函数中执行销毁操作</p>
</li>
<li><p>使用时声明一个该对象的类</p>
</li>
</ol>
<h1 id="5-核心处理逻辑HTTP-CONN"><a href="#5-核心处理逻辑HTTP-CONN" class="headerlink" title="5 核心处理逻辑HTTP_CONN"></a>5 核心处理逻辑HTTP_CONN</h1><p>文件包括http_conn.h和http_conn.cpp。</p>
<h2 id="5-1-初始化操作"><a href="#5-1-初始化操作" class="headerlink" title="5.1 初始化操作"></a>5.1 初始化操作</h2><p>在头文件class http_conn 中定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> FILENAME_LEN = <span class="number">200</span>;        <span class="comment">// 文件名的最大长度</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> READ_BUFFER_SIZE = <span class="number">2048</span>;   <span class="comment">// 读缓冲区的大小</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> WRITE_BUFFER_SIZE = <span class="number">1024</span>;  <span class="comment">// 写缓冲区的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> sockaddr_in&amp; addr)</span></span>; <span class="comment">// 初始化新接受的连接</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">close_conn</span><span class="params">()</span></span>;  <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">()</span></span>; <span class="comment">// 处理客户端请求</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">read</span><span class="params">()</span></span>;<span class="comment">// 非阻塞读</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">write</span><span class="params">()</span></span>;<span class="comment">// 非阻塞写</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;    <span class="comment">// 初始化连接</span></span><br><span class="line">    <span class="function">HTTP_CODE <span class="title">process_read</span><span class="params">()</span></span>;    <span class="comment">// 解析HTTP请求</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">process_write</span><span class="params">( HTTP_CODE ret )</span></span>;    <span class="comment">// 填充HTTP应答</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_epollfd;       <span class="comment">// 所有socket上的事件都被注册到同一个epoll内核事件中，所以设置成静态的</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_user_count;    <span class="comment">// 统计用户的数量</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_sockfd;           <span class="comment">// 该HTTP连接的socket和对方的socket地址</span></span><br><span class="line">    sockaddr_in m_address;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> m_read_buf[ READ_BUFFER_SIZE ];    <span class="comment">// 读缓冲区</span></span><br><span class="line">    <span class="type">int</span> m_read_idx;                         <span class="comment">// 标识读缓冲区中已经读入的客户端数据的最后一个字节的下一个位置</span></span><br><span class="line">    <span class="type">int</span> m_checked_idx;                      <span class="comment">// 当前正在分析的字符在读缓冲区中的位置</span></span><br><span class="line">    <span class="type">int</span> m_start_line;                       <span class="comment">// 当前正在解析的行的起始位置</span></span><br><span class="line"></span><br><span class="line">    CHECK_STATE m_check_state;              <span class="comment">// 主状态机当前所处的状态</span></span><br><span class="line">    METHOD m_method;                        <span class="comment">// 请求方法</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> m_real_file[ FILENAME_LEN ];       <span class="comment">// 客户请求的目标文件的完整路径，其内容等于 doc_root + m_url, doc_root是网站根目录</span></span><br><span class="line">    <span class="type">char</span>* m_url;                            <span class="comment">// 客户请求的目标文件的文件名</span></span><br><span class="line">    <span class="type">char</span>* m_version;                        <span class="comment">// HTTP协议版本号，我们仅支持HTTP1.1</span></span><br><span class="line">    <span class="type">char</span>* m_host;                           <span class="comment">// 主机名</span></span><br><span class="line">    <span class="type">int</span> m_content_length;                   <span class="comment">// HTTP请求的消息总长度</span></span><br><span class="line">    <span class="type">bool</span> m_linger;                          <span class="comment">// HTTP请求是否要求保持连接</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> m_write_buf[ WRITE_BUFFER_SIZE ];  <span class="comment">// 写缓冲区</span></span><br><span class="line">    <span class="type">int</span> m_write_idx;                        <span class="comment">// 写缓冲区中待发送的字节数</span></span><br><span class="line">    <span class="type">char</span>* m_file_address;                   <span class="comment">// 客户请求的目标文件被mmap到内存中的起始位置</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> m_file_stat;                <span class="comment">// 目标文件的状态。通过它我们可以判断文件是否存在、是否为目录、是否可读，并获取文件大小等信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">iovec</span> m_iv[<span class="number">2</span>];                   <span class="comment">// 我们将采用writev来执行写操作，所以定义下面两个成员，其中m_iv_count表示被写内存块的数量。</span></span><br><span class="line">    <span class="type">int</span> m_iv_count;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bytes_to_send;              <span class="comment">// 将要发送的数据的字节数</span></span><br><span class="line">    <span class="type">int</span> bytes_have_send;            <span class="comment">// 已经发送的字节数</span></span><br></pre></td></tr></table></figure>
<p>其中<code>HTTP_CODE</code>是我们解析HTTP请求的有限状态机</p>
<p>具体函数在http_conn.cpp定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;http_conn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置文件描述符非阻塞,addfd()函数中使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">setnonblocking</span><span class="params">( <span class="type">int</span> fd )</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> old_option = <span class="built_in">fcntl</span>( fd, F_GETFL );</span><br><span class="line">    <span class="type">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    <span class="built_in">fcntl</span>( fd, F_SETFL, new_option );</span><br><span class="line">    <span class="keyword">return</span> old_option;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向epoll中添加需要监听的文件描述符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addfd</span><span class="params">( <span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">bool</span> one_shot )</span> </span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLRDHUP;</span><br><span class="line">    <span class="keyword">if</span>(one_shot) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 防止同一个通信被不同的线程处理</span></span><br><span class="line">        event.events |= EPOLLONESHOT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>(epollfd, EPOLL_CTL_ADD, fd, &amp;event);</span><br><span class="line">    <span class="comment">// 设置文件描述符非阻塞</span></span><br><span class="line">    <span class="built_in">setnonblocking</span>(fd);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接,外部调用初始化套接字地址</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::init</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> sockaddr_in&amp; addr)</span></span>&#123;</span><br><span class="line">    m_sockfd = sockfd;</span><br><span class="line">    m_address = addr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 端口复用</span></span><br><span class="line">    <span class="type">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>( m_sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="built_in">sizeof</span>( reuse ) );</span><br><span class="line">    <span class="built_in">addfd</span>( m_epollfd, sockfd, <span class="literal">true</span> );</span><br><span class="line">    m_user_count++;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    bytes_to_send = <span class="number">0</span>;</span><br><span class="line">    bytes_have_send = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    m_check_state = CHECK_STATE_REQUESTLINE;    <span class="comment">// 初始状态为检查请求行</span></span><br><span class="line">    m_linger = <span class="literal">false</span>;       <span class="comment">// 默认不保持链接  Connection : keep-alive保持连接</span></span><br><span class="line"></span><br><span class="line">    m_method = GET;         <span class="comment">// 默认请求方式为GET</span></span><br><span class="line">    m_url = <span class="number">0</span>;              </span><br><span class="line">    m_version = <span class="number">0</span>;</span><br><span class="line">    m_content_length = <span class="number">0</span>;</span><br><span class="line">    m_host = <span class="number">0</span>;</span><br><span class="line">    m_start_line = <span class="number">0</span>;</span><br><span class="line">    m_checked_idx = <span class="number">0</span>;</span><br><span class="line">    m_read_idx = <span class="number">0</span>;</span><br><span class="line">    m_write_idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bzero</span>(m_read_buf, READ_BUFFER_SIZE);</span><br><span class="line">    <span class="built_in">bzero</span>(m_write_buf, READ_BUFFER_SIZE);</span><br><span class="line">    <span class="built_in">bzero</span>(m_real_file, FILENAME_LEN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从epoll中移除监听的文件描述符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">removefd</span><span class="params">( <span class="type">int</span> epollfd, <span class="type">int</span> fd )</span> </span>&#123;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>( epollfd, EPOLL_CTL_DEL, fd, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">close</span>(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::close_conn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m_sockfd != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">removefd</span>(m_epollfd, m_sockfd);</span><br><span class="line">        m_sockfd = <span class="number">-1</span>;</span><br><span class="line">        m_user_count--; <span class="comment">// 关闭一个连接，将客户总数量-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改文件描述符，重置socket上的EPOLLONESHOT事件，以确保下一次可读时，EPOLLIN事件能被触发</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modfd</span><span class="params">(<span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">int</span> ev)</span> </span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = ev | EPOLLET | EPOLLONESHOT | EPOLLRDHUP;</span><br><span class="line">    <span class="built_in">epoll_ctl</span>( epollfd, EPOLL_CTL_MOD, fd, &amp;event );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的客户数</span></span><br><span class="line"><span class="type">int</span> http_conn::m_user_count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 所有socket上的事件都被注册到同一个epoll内核事件中，所以设置成静态的</span></span><br><span class="line"><span class="type">int</span> http_conn::m_epollfd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由线程池中的工作线程调用，这是处理HTTP请求的入口函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解析HTTP请求</span></span><br><span class="line">    HTTP_CODE read_ret = <span class="built_in">process_read</span>();</span><br><span class="line">    <span class="keyword">if</span> ( read_ret == NO_REQUEST ) &#123;</span><br><span class="line">        <span class="built_in">modfd</span>( m_epollfd, m_sockfd, EPOLLIN );</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成响应</span></span><br><span class="line">    <span class="type">bool</span> write_ret = <span class="built_in">process_write</span>( read_ret );</span><br><span class="line">    <span class="keyword">if</span> ( !write_ret ) &#123;</span><br><span class="line">        <span class="built_in">close_conn</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modfd</span>( m_epollfd, m_sockfd, EPOLLOUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="5-2-解析HTTP请求报文（正则表达式和有限状态机）"><a href="#5-2-解析HTTP请求报文（正则表达式和有限状态机）" class="headerlink" title="5.2 解析HTTP请求报文（正则表达式和有限状态机）"></a>5.2 解析HTTP请求报文（正则表达式和有限状态机）</h2><p>有限状态机:有限状态机是一种用来进行对象行为建模的工具，其作用主要是描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件，比如TCP就是一个典型的有限状态机。</p>
<p>本项目定义四种状态</p>
<ul>
<li>METHOD：为HTTP请求方法，项目中仅支持GET</li>
<li>CHECK_STATE：解析客户端请求时，主状态机的状态<ul>
<li>CHECK_STATE_REQUESTLINE:当前正在分析请求行</li>
<li>CHECK_STATE_HEADER:当前正在分析头部字段</li>
<li>CHECK_STATE_CONTENT:当前正在解析请求体</li>
</ul>
</li>
<li>HTTP_CODE：服务器处理HTTP请求的可能结果，报文解析的结果<ul>
<li>NO_REQUEST          :   请求不完整，需要继续读取客户数据</li>
<li>GET_REQUEST         :   表示获得了一个完成的客户请求</li>
<li>BAD_REQUEST         :   表示客户请求语法错误</li>
<li>NO_RESOURCE         :   表示服务器没有资源</li>
<li>FORBIDDEN_REQUEST   :   表示客户对资源没有足够的访问权限</li>
<li>FILE_REQUEST        :   文件请求,获取文件成功</li>
<li>INTERNAL_ERROR      :   表示服务器内部错误</li>
<li>CLOSED_CONNECTION   :   表示客户端已经关闭连接了</li>
</ul>
</li>
<li>LINE_STATUS：从状态机的三种可能状态，即行的读取状态<ul>
<li>LINE_OK：     读取到一个完整的行 </li>
<li>LINE_BAD：    行出错 </li>
<li>LINE_OPEN：   行数据尚且不完整</li>
</ul>
</li>
</ul>
<p>头文件中添加相应函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTTP请求方法，这里只支持GET</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">METHOD</span> &#123;GET = <span class="number">0</span>, POST, HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT&#125;;</span><br><span class="line"><span class="comment">// 解析客户端请求时，主状态机的状态</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CHECK_STATE</span> &#123; CHECK_STATE_REQUESTLINE = <span class="number">0</span>, CHECK_STATE_HEADER, CHECK_STATE_CONTENT &#125;;</span><br><span class="line"><span class="comment">//服务器处理HTTP请求的可能结果，报文解析的结果</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">HTTP_CODE</span> &#123; NO_REQUEST, GET_REQUEST, BAD_REQUEST, NO_RESOURCE, FORBIDDEN_REQUEST, FILE_REQUEST, INTERNAL_ERROR, CLOSED_CONNECTION &#125;;</span><br><span class="line"><span class="comment">// 从状态机的三种可能状态，即行的读取状态，分别表示</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">LINE_STATUS</span> &#123; LINE_OK = <span class="number">0</span>, LINE_BAD, LINE_OPEN &#125;;</span><br><span class="line"><span class="comment">// 下面这一组函数被process_read调用以分析HTTP请求</span></span><br><span class="line"><span class="function">HTTP_CODE <span class="title">parse_request_line</span><span class="params">( <span class="type">char</span>* text )</span></span>;</span><br><span class="line"><span class="function">HTTP_CODE <span class="title">parse_headers</span><span class="params">( <span class="type">char</span>* text )</span></span>;</span><br><span class="line"><span class="function">HTTP_CODE <span class="title">parse_content</span><span class="params">( <span class="type">char</span>* text )</span></span>;</span><br><span class="line"><span class="function">HTTP_CODE <span class="title">do_request</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">get_line</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_read_buf + m_start_line; &#125;</span><br><span class="line"><span class="function">LINE_STATUS <span class="title">parse_line</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  循环读取客户数据，直到无数据可读或者对方关闭连接</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_read_idx &gt;= READ_BUFFER_SIZE ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> bytes_read = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 从m_read_buf + m_read_idx索引出开始保存数据，大小是READ_BUFFER_SIZE - m_read_idx</span></span><br><span class="line">        bytes_read = <span class="built_in">recv</span>(m_sockfd, m_read_buf + m_read_idx, </span><br><span class="line">        READ_BUFFER_SIZE - m_read_idx, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> (bytes_read == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN || errno == EWOULDBLOCK ) &#123;</span><br><span class="line">                <span class="comment">// 没有数据</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bytes_read == <span class="number">0</span>) &#123;   <span class="comment">// 对方关闭连接</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_read_idx += bytes_read;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析一行，判断依据\r\n</span></span><br><span class="line"><span class="function">http_conn::LINE_STATUS <span class="title">http_conn::parse_line</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    <span class="keyword">for</span> ( ; m_checked_idx &lt; m_read_idx; ++m_checked_idx ) &#123;</span><br><span class="line">        temp = m_read_buf[ m_checked_idx ];</span><br><span class="line">        <span class="keyword">if</span> ( temp == <span class="string">&#x27;\r&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ( m_checked_idx + <span class="number">1</span> ) == m_read_idx ) &#123;</span><br><span class="line">                <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( m_read_buf[ m_checked_idx + <span class="number">1</span> ] == <span class="string">&#x27;\n&#x27;</span> ) &#123;</span><br><span class="line">                m_read_buf[ m_checked_idx++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                m_read_buf[ m_checked_idx++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>( temp == <span class="string">&#x27;\n&#x27;</span> )  &#123;</span><br><span class="line">            <span class="keyword">if</span>( ( m_checked_idx &gt; <span class="number">1</span>) &amp;&amp; ( m_read_buf[ m_checked_idx - <span class="number">1</span> ] == <span class="string">&#x27;\r&#x27;</span> ) ) &#123;</span><br><span class="line">                m_read_buf[ m_checked_idx<span class="number">-1</span> ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                m_read_buf[ m_checked_idx++ ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> LINE_OK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> LINE_BAD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LINE_OPEN;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析HTTP请求行，获得请求方法，目标URL,以及HTTP版本号</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_request_line</span><span class="params">(<span class="type">char</span>* text)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// GET /index.html HTTP/1.1</span></span><br><span class="line">    m_url = <span class="built_in">strpbrk</span>(text, <span class="string">&quot; \t&quot;</span>); <span class="comment">// 判断第二个参数中的字符哪个在text中最先出现</span></span><br><span class="line">    <span class="keyword">if</span> (! m_url) &#123; </span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// GET\0/index.html HTTP/1.1</span></span><br><span class="line">    *m_url++ = <span class="string">&#x27;\0&#x27;</span>;    <span class="comment">// 置位空字符，字符串结束符</span></span><br><span class="line">    <span class="type">char</span>* method = text;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcasecmp</span>(method, <span class="string">&quot;GET&quot;</span>) == <span class="number">0</span> ) &#123; <span class="comment">// 忽略大小写比较</span></span><br><span class="line">        m_method = GET;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// /index.html HTTP/1.1</span></span><br><span class="line">    <span class="comment">// 检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标。</span></span><br><span class="line">    m_version = <span class="built_in">strpbrk</span>( m_url, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">    <span class="keyword">if</span> (!m_version) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    *m_version++ = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcasecmp</span>( m_version, <span class="string">&quot;HTTP/1.1&quot;</span>) != <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://192.168.110.129:10000/index.html</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncasecmp</span>(m_url, <span class="string">&quot;http://&quot;</span>, <span class="number">7</span>) == <span class="number">0</span> ) &#123;   </span><br><span class="line">        m_url += <span class="number">7</span>;</span><br><span class="line">        <span class="comment">// 在参数 str 所指向的字符串中搜索第一次出现字符 c（一个无符号字符）的位置。</span></span><br><span class="line">        m_url = <span class="built_in">strchr</span>( m_url, <span class="string">&#x27;/&#x27;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !m_url || m_url[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    m_check_state = CHECK_STATE_HEADER; <span class="comment">// 检查状态变成检查头</span></span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析HTTP请求的一个头部信息</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_headers</span><span class="params">(<span class="type">char</span>* text)</span> </span>&#123;   </span><br><span class="line">    <span class="comment">// 遇到空行，表示头部字段解析完毕</span></span><br><span class="line">    <span class="keyword">if</span>( text[<span class="number">0</span>] == <span class="string">&#x27;\0&#x27;</span> ) &#123;</span><br><span class="line">        <span class="comment">// 如果HTTP请求有消息体，则还需要读取m_content_length字节的消息体，</span></span><br><span class="line">        <span class="comment">// 状态机转移到CHECK_STATE_CONTENT状态</span></span><br><span class="line">        <span class="keyword">if</span> ( m_content_length != <span class="number">0</span> ) &#123;</span><br><span class="line">            m_check_state = CHECK_STATE_CONTENT;</span><br><span class="line">            <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则说明我们已经得到了一个完整的HTTP请求</span></span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strncasecmp</span>( text, <span class="string">&quot;Connection:&quot;</span>, <span class="number">11</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 处理Connection 头部字段  Connection: keep-alive</span></span><br><span class="line">        text += <span class="number">11</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>( text, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">strcasecmp</span>( text, <span class="string">&quot;keep-alive&quot;</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">            m_linger = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strncasecmp</span>( text, <span class="string">&quot;Content-Length:&quot;</span>, <span class="number">15</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 处理Content-Length头部字段</span></span><br><span class="line">        text += <span class="number">15</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>( text, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">        m_content_length = <span class="built_in">atol</span>(text);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">strncasecmp</span>( text, <span class="string">&quot;Host:&quot;</span>, <span class="number">5</span> ) == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 处理Host头部字段</span></span><br><span class="line">        text += <span class="number">5</span>;</span><br><span class="line">        text += <span class="built_in">strspn</span>( text, <span class="string">&quot; \t&quot;</span> );</span><br><span class="line">        m_host = text;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;oop! unknow header %s\n&quot;</span>, text );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们没有真正解析HTTP请求的消息体，只是判断它是否被完整的读入了</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::parse_content</span><span class="params">( <span class="type">char</span>* text )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( m_read_idx &gt;= ( m_content_length + m_checked_idx ) )</span><br><span class="line">    &#123;</span><br><span class="line">        text[ m_content_length ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> GET_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主状态机，解析请求</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::process_read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LINE_STATUS line_status = LINE_OK;</span><br><span class="line">    HTTP_CODE ret = NO_REQUEST;</span><br><span class="line">    <span class="type">char</span>* text = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (((m_check_state == CHECK_STATE_CONTENT) &amp;&amp; (line_status == LINE_OK))</span><br><span class="line">                || ((line_status = <span class="built_in">parse_line</span>()) == LINE_OK)) &#123;</span><br><span class="line">        <span class="comment">// 获取一行数据</span></span><br><span class="line">        text = <span class="built_in">get_line</span>();</span><br><span class="line">        m_start_line = m_checked_idx;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;got 1 http line: %s\n&quot;</span>, text );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> ( m_check_state ) &#123;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_REQUESTLINE: &#123;</span><br><span class="line">                ret = <span class="built_in">parse_request_line</span>( text );</span><br><span class="line">                <span class="keyword">if</span> ( ret == BAD_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_HEADER: &#123;</span><br><span class="line">                ret = <span class="built_in">parse_headers</span>( text );</span><br><span class="line">                <span class="keyword">if</span> ( ret == BAD_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ret == GET_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">do_request</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> CHECK_STATE_CONTENT: &#123;</span><br><span class="line">                ret = <span class="built_in">parse_content</span>( text );</span><br><span class="line">                <span class="keyword">if</span> ( ret == GET_REQUEST ) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">do_request</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                line_status = LINE_OPEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> INTERNAL_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NO_REQUEST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-写响应"><a href="#5-3-写响应" class="headerlink" title="5.3 写响应"></a>5.3 写响应</h2><p>头文件中添加相应函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这一组函数被process_write调用以填充HTTP应答。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unmap</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_response</span><span class="params">( <span class="type">const</span> <span class="type">char</span>* format, ... )</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_content</span><span class="params">( <span class="type">const</span> <span class="type">char</span>* content )</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_content_type</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_status_line</span><span class="params">( <span class="type">int</span> status, <span class="type">const</span> <span class="type">char</span>* title )</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_headers</span><span class="params">( <span class="type">int</span> content_length )</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_content_length</span><span class="params">( <span class="type">int</span> content_length )</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_linger</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">add_blank_line</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义HTTP响应的一些状态信息</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ok_200_title = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_400_title = <span class="string">&quot;Bad Request&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_400_form = <span class="string">&quot;Your request has bad syntax or is inherently impossible to satisfy.\n&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_403_title = <span class="string">&quot;Forbidden&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_403_form = <span class="string">&quot;You do not have permission to get file from this server.\n&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_404_title = <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_404_form = <span class="string">&quot;The requested file was not found on this server.\n&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_500_title = <span class="string">&quot;Internal Error&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* error_500_form = <span class="string">&quot;There was an unusual problem serving the requested file.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网站的根目录</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* doc_root = <span class="string">&quot;/home/mobbu/myWebserver/resources&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当得到一个完整、正确的HTTP请求时，我们就分析目标文件的属性，</span></span><br><span class="line"><span class="comment">// 如果目标文件存在、对所有用户可读，且不是目录，则使用mmap将其</span></span><br><span class="line"><span class="comment">// 映射到内存地址m_file_address处，并告诉调用者获取文件成功</span></span><br><span class="line"><span class="function">http_conn::HTTP_CODE <span class="title">http_conn::do_request</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>( m_real_file, doc_root );</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>( doc_root );</span><br><span class="line">    <span class="built_in">strncpy</span>( m_real_file + len, m_url, FILENAME_LEN - len - <span class="number">1</span> );</span><br><span class="line">    <span class="comment">// 获取m_real_file文件的相关的状态信息，-1失败，0成功</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">stat</span>( m_real_file, &amp;m_file_stat ) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_RESOURCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断访问权限</span></span><br><span class="line">    <span class="keyword">if</span> ( ! ( m_file_stat.st_mode &amp; S_IROTH ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> FORBIDDEN_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是目录</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">S_ISDIR</span>( m_file_stat.st_mode ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BAD_REQUEST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以只读方式打开文件</span></span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>( m_real_file, O_RDONLY );</span><br><span class="line">    <span class="comment">// 创建内存映射</span></span><br><span class="line">    m_file_address = ( <span class="type">char</span>* )<span class="built_in">mmap</span>( <span class="number">0</span>, m_file_stat.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span> );</span><br><span class="line">    <span class="built_in">close</span>( fd );</span><br><span class="line">    <span class="keyword">return</span> FILE_REQUEST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对内存映射区执行munmap操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">http_conn::unmap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_file_address )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">munmap</span>( m_file_address, m_file_stat.st_size );</span><br><span class="line">        m_file_address = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写HTTP响应</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::write</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( bytes_to_send == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// 将要发送的字节为0，这一次响应结束。</span></span><br><span class="line">        <span class="built_in">modfd</span>( m_epollfd, m_sockfd, EPOLLIN ); </span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 分散写</span></span><br><span class="line">        temp = <span class="built_in">writev</span>(m_sockfd, m_iv, m_iv_count);</span><br><span class="line">        <span class="keyword">if</span> ( temp &lt;= <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="comment">// 如果TCP写缓冲没有空间，则等待下一轮EPOLLOUT事件，虽然在此期间，</span></span><br><span class="line">            <span class="comment">// 服务器无法立即接收到同一客户的下一个请求，但可以保证连接的完整性。</span></span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN ) &#123;</span><br><span class="line">                <span class="built_in">modfd</span>( m_epollfd, m_sockfd, EPOLLOUT );</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">unmap</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes_have_send += temp;</span><br><span class="line">        bytes_to_send -= temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes_have_send &gt;= m_iv[<span class="number">0</span>].iov_len)</span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = <span class="number">0</span>;</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_base = m_file_address + (bytes_have_send - m_write_idx);</span><br><span class="line">            m_iv[<span class="number">1</span>].iov_len = bytes_to_send;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_base = m_write_buf + bytes_have_send;</span><br><span class="line">            m_iv[<span class="number">0</span>].iov_len = m_iv[<span class="number">0</span>].iov_len - temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytes_to_send &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 没有数据要发送了</span></span><br><span class="line">            <span class="built_in">unmap</span>();</span><br><span class="line">            <span class="built_in">modfd</span>(m_epollfd, m_sockfd, EPOLLIN);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m_linger)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">init</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往写缓冲中写入待发送的数据</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_response</span><span class="params">( <span class="type">const</span> <span class="type">char</span>* format, ... )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_write_idx &gt;= WRITE_BUFFER_SIZE ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    va_list arg_list;</span><br><span class="line">    <span class="built_in">va_start</span>( arg_list, format );</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">vsnprintf</span>( m_write_buf + m_write_idx, WRITE_BUFFER_SIZE - <span class="number">1</span> - m_write_idx, format, arg_list );</span><br><span class="line">    <span class="keyword">if</span>( len &gt;= ( WRITE_BUFFER_SIZE - <span class="number">1</span> - m_write_idx ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_write_idx += len;</span><br><span class="line">    <span class="built_in">va_end</span>( arg_list );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_status_line</span><span class="params">( <span class="type">int</span> status, <span class="type">const</span> <span class="type">char</span>* title )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>( <span class="string">&quot;%s %d %s\r\n&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>, status, title );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_headers</span><span class="params">(<span class="type">int</span> content_len)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add_content_length</span>(content_len);</span><br><span class="line">    <span class="built_in">add_content_type</span>();</span><br><span class="line">    <span class="built_in">add_linger</span>();</span><br><span class="line">    <span class="built_in">add_blank_line</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_content_length</span><span class="params">(<span class="type">int</span> content_len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>( <span class="string">&quot;Content-Length: %d\r\n&quot;</span>, content_len );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_linger</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>( <span class="string">&quot;Connection: %s\r\n&quot;</span>, ( m_linger == <span class="literal">true</span> ) ? <span class="string">&quot;keep-alive&quot;</span> : <span class="string">&quot;close&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_blank_line</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>( <span class="string">&quot;%s&quot;</span>, <span class="string">&quot;\r\n&quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_content</span><span class="params">( <span class="type">const</span> <span class="type">char</span>* content )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>( <span class="string">&quot;%s&quot;</span>, content );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::add_content_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">add_response</span>(<span class="string">&quot;Content-Type:%s\r\n&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据服务器处理HTTP请求的结果，决定返回给客户端的内容</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">http_conn::process_write</span><span class="params">(HTTP_CODE ret)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> INTERNAL_ERROR:</span><br><span class="line">            <span class="built_in">add_status_line</span>( <span class="number">500</span>, error_500_title );</span><br><span class="line">            <span class="built_in">add_headers</span>( <span class="built_in">strlen</span>( error_500_form ) );</span><br><span class="line">            <span class="keyword">if</span> ( ! <span class="built_in">add_content</span>( error_500_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> BAD_REQUEST:</span><br><span class="line">            <span class="built_in">add_status_line</span>( <span class="number">400</span>, error_400_title );</span><br><span class="line">            <span class="built_in">add_headers</span>( <span class="built_in">strlen</span>( error_400_form ) );</span><br><span class="line">            <span class="keyword">if</span> ( ! <span class="built_in">add_content</span>( error_400_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NO_RESOURCE:</span><br><span class="line">            <span class="built_in">add_status_line</span>( <span class="number">404</span>, error_404_title );</span><br><span class="line">            <span class="built_in">add_headers</span>( <span class="built_in">strlen</span>( error_404_form ) );</span><br><span class="line">            <span class="keyword">if</span> ( ! <span class="built_in">add_content</span>( error_404_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FORBIDDEN_REQUEST:</span><br><span class="line">            <span class="built_in">add_status_line</span>( <span class="number">403</span>, error_403_title );</span><br><span class="line">            <span class="built_in">add_headers</span>(<span class="built_in">strlen</span>( error_403_form));</span><br><span class="line">            <span class="keyword">if</span> ( ! <span class="built_in">add_content</span>( error_403_form ) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FILE_REQUEST:</span><br><span class="line">            <span class="built_in">add_status_line</span>(<span class="number">200</span>, ok_200_title );</span><br><span class="line">            <span class="built_in">add_headers</span>(m_file_stat.st_size);</span><br><span class="line">            m_iv[ <span class="number">0</span> ].iov_base = m_write_buf;</span><br><span class="line">            m_iv[ <span class="number">0</span> ].iov_len = m_write_idx;</span><br><span class="line">            m_iv[ <span class="number">1</span> ].iov_base = m_file_address;</span><br><span class="line">            m_iv[ <span class="number">1</span> ].iov_len = m_file_stat.st_size;</span><br><span class="line">            m_iv_count = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            bytes_to_send = m_write_idx + m_file_stat.st_size;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_iv[ <span class="number">0</span> ].iov_base = m_write_buf;</span><br><span class="line">    m_iv[ <span class="number">0</span> ].iov_len = m_write_idx;</span><br><span class="line">    m_iv_count = <span class="number">1</span>;</span><br><span class="line">    bytes_to_send = m_write_idx;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-关闭非活跃连接"><a href="#5-4-关闭非活跃连接" class="headerlink" title="5.4 关闭非活跃连接"></a>5.4 关闭非活跃连接</h2><p>在程序内部添加定时处理任务，并添加到监听的文件描述，定时比如设置5s，超过5s没有操作的事件就删除，否则会有将文件操作符用完的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">timer_handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 定时处理任务，实际上就是调用tick()函数</span></span><br><span class="line">    timer_lst.<span class="built_in">tick</span>();</span><br><span class="line">    <span class="comment">// 因为一次 alarm 调用只会引起一次SIGALARM 信号，所以我们要重新定时，以不断触发 SIGALARM信号。</span></span><br><span class="line">    <span class="built_in">alarm</span>(TIMESLOT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器回调函数，它删除非活动连接socket上的注册事件，并关闭之。</span></span><br></pre></td></tr></table></figure>


<h1 id="6-主函数"><a href="#6-主函数" class="headerlink" title="6 主函数"></a>6 主函数</h1><p>包含main函数，文件main.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;locker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;threadpool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;http_conn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FD 65536   <span class="comment">// 最大的文件描述符个数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_EVENT_NUMBER 10000  <span class="comment">// 监听的最大的事件数量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文件描述符</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">addfd</span><span class="params">( <span class="type">int</span> epollfd, <span class="type">int</span> fd, <span class="type">bool</span> one_shot )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">removefd</span><span class="params">( <span class="type">int</span> epollfd, <span class="type">int</span> fd )</span></span>;</span><br><span class="line"><span class="comment">//添加信号捕捉</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addsig</span><span class="params">(<span class="type">int</span> sig, <span class="type">void</span>( handler )(<span class="type">int</span>))</span></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> sa;</span><br><span class="line">    <span class="built_in">memset</span>( &amp;sa, <span class="string">&#x27;\0&#x27;</span>, <span class="built_in">sizeof</span>( sa ) );</span><br><span class="line">    sa.sa_handler = handler;</span><br><span class="line">    <span class="built_in">sigfillset</span>( &amp;sa.sa_mask );</span><br><span class="line">    <span class="built_in">assert</span>( <span class="built_in">sigaction</span>( sig, &amp;sa, <span class="literal">NULL</span> ) != <span class="number">-1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[] )</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">1</span> ) &#123;<span class="comment">//进程号小于等于1时提示</span></span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;usage: %s port_number\n&quot;</span>, <span class="built_in">basename</span>(argv[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取端口号,atoi()函数把字符串转换成整型数。</span></span><br><span class="line">    <span class="type">int</span> port = <span class="built_in">atoi</span>( argv[<span class="number">1</span>] );</span><br><span class="line">    <span class="comment">// 对SIGPIPE信号进行处理</span></span><br><span class="line">    <span class="built_in">addsig</span>( SIGPIPE, SIG_IGN );</span><br><span class="line">    <span class="comment">// 创建线程池，初始化线程池</span></span><br><span class="line">    threadpool&lt; http_conn &gt;* pool = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        pool = <span class="keyword">new</span> threadpool&lt;http_conn&gt;;</span><br><span class="line">    &#125; <span class="built_in">catch</span>( ... ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个数据进行保存所有的客户端信息</span></span><br><span class="line">    http_conn* users = <span class="keyword">new</span> http_conn[ MAX_FD ];</span><br><span class="line">    <span class="comment">// 创建监听套接字</span></span><br><span class="line">    <span class="type">int</span> listenfd = <span class="built_in">socket</span>( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> address;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_port = <span class="built_in">htons</span>( port );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 端口复用</span></span><br><span class="line">    <span class="type">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setsockopt</span>( listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="built_in">sizeof</span>( reuse ) );</span><br><span class="line">    ret = <span class="built_in">bind</span>( listenfd, ( <span class="keyword">struct</span> sockaddr* )&amp;address, <span class="built_in">sizeof</span>( address ) );</span><br><span class="line">    ret = <span class="built_in">listen</span>( listenfd, <span class="number">5</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建epoll对象，和事件数组，添加</span></span><br><span class="line">    epoll_event events[ MAX_EVENT_NUMBER ];</span><br><span class="line">    <span class="type">int</span> epollfd = <span class="built_in">epoll_create</span>( <span class="number">5</span> );</span><br><span class="line">    <span class="comment">// 将监听的文件描述符添加到epoll对象中</span></span><br><span class="line">    <span class="built_in">addfd</span>( epollfd, listenfd, <span class="literal">false</span> );</span><br><span class="line">    http_conn::m_epollfd = epollfd;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> number = <span class="built_in">epoll_wait</span>( epollfd, events, MAX_EVENT_NUMBER, <span class="number">-1</span> );</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( ( number &lt; <span class="number">0</span> ) &amp;&amp; ( errno != EINTR ) ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">&quot;epoll failure\n&quot;</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环遍历时间数组</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; number; i++ ) &#123;</span><br><span class="line">            <span class="type">int</span> sockfd = events[i].data.fd;</span><br><span class="line">            <span class="keyword">if</span>( sockfd == listenfd ) &#123;</span><br><span class="line">                <span class="comment">//有客户端链接进来</span></span><br><span class="line">                <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> client_address;</span><br><span class="line">                <span class="type">socklen_t</span> client_addrlength = <span class="built_in">sizeof</span>( client_address );</span><br><span class="line">                <span class="type">int</span> connfd = <span class="built_in">accept</span>( listenfd, ( <span class="keyword">struct</span> sockaddr* )&amp;client_address, &amp;client_addrlength );</span><br><span class="line">                <span class="keyword">if</span> ( connfd &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>( <span class="string">&quot;errno is: %d\n&quot;</span>, errno );</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">if</span>( http_conn::m_user_count &gt;= MAX_FD ) &#123;</span><br><span class="line">                    <span class="comment">// 目前连接数满了</span></span><br><span class="line">                    <span class="comment">// 给客户端写一个信息： 服务器内部忙</span></span><br><span class="line">                    <span class="built_in">close</span>(connfd);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将新的客户的数据初始化，并放到数组中</span></span><br><span class="line">                users[connfd].<span class="built_in">init</span>( connfd, client_address);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>( events[i].events &amp; ( EPOLLRDHUP | EPOLLHUP | EPOLLERR ) ) &#123;</span><br><span class="line">                <span class="comment">// 异常检测</span></span><br><span class="line">                users[sockfd].<span class="built_in">close_conn</span>();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(events[i].events &amp; EPOLLIN) &#123;</span><br><span class="line">                <span class="comment">// EPOLLIN事件</span></span><br><span class="line">                <span class="keyword">if</span>(users[sockfd].<span class="built_in">read</span>()) &#123;</span><br><span class="line">                    <span class="comment">// 一次性把所有数据读完</span></span><br><span class="line">                    pool-&gt;<span class="built_in">append</span>(users + sockfd);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    users[sockfd].<span class="built_in">close_conn</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;  <span class="keyword">else</span> <span class="keyword">if</span>( events[i].events &amp; EPOLLOUT ) &#123;</span><br><span class="line">                <span class="comment">// EPOLOUT事件，生成响应</span></span><br><span class="line">                <span class="keyword">if</span>( !users[sockfd].<span class="built_in">write</span>() ) &#123;</span><br><span class="line">                    users[sockfd].<span class="built_in">close_conn</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>( epollfd );</span><br><span class="line">    <span class="built_in">close</span>( listenfd );</span><br><span class="line">    <span class="keyword">delete</span> [] users;</span><br><span class="line">    <span class="keyword">delete</span> pool;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-压力测试"><a href="#7-压力测试" class="headerlink" title="7 压力测试"></a>7 压力测试</h1><p>Webbench 是 Linux 上一款知名的、优秀的 web 性能压力测试工具。它是由Lionbridge公司开发。</p>
<blockquote>
<ul>
<li>测试处在相同硬件上，不同服务的性能以及不同硬件上同一个服务的运行状况。</li>
<li>展示服务器的两项内容：每秒钟响应请求数和每秒钟传输数据量。</li>
</ul>
</blockquote>
<p>基本原理：Webbench 首先 fork 出多个子进程，每个子进程都循环做 web 访问测试。子进程把访问的结果通过pipe 告诉父进程，父进程做最终的统计结果。</p>
<p>实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">webbench -c 1000 -t 30 http://192.168.110.129:10000/index.html</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>c 表示客户端数</li>
<li>t 表示时间</li>
</ul>
<h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>项目详细的总流程：Reactor模式</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230815193855.png"></p>
<h2 id="8-1-一个完整的工作流程"><a href="#8-1-一个完整的工作流程" class="headerlink" title="8.1 一个完整的工作流程"></a>8.1 一个完整的工作流程</h2><ol>
<li>一个客户端发起连接</li>
<li>检测到连接，初始化新接收的连接，比如设置端口复用、状态设置、将epollfd设置为ontshot，保证只有一个线程操作等。</li>
<li>如果检测到错误或者客户端断开连接，则断开连接</li>
<li>检测到读事件，进行数据的读取，并且将对应的文件描述符添加到线程池中</li>
<li>线程池对添加的任务进行运行操作，process_read()分次解析报文，当解析完毕时，process_write()会生成响应报文，生成完毕后会将m_epollfd修改检测EPOLLOUT写事件</li>
<li>检测到写事件，对生成的响应报文进行分部分发送到客户端socket地址</li>
<li>写完毕后，关闭连接</li>
</ol>
<h2 id="8-2-不同部分的总结"><a href="#8-2-不同部分的总结" class="headerlink" title="8.2 不同部分的总结"></a>8.2 不同部分的总结</h2><h3 id="8-2-1主函数中："><a href="#8-2-1主函数中：" class="headerlink" title="8.2.1主函数中："></a>8.2.1主函数中：</h3><ul>
<li><p>主函数逻辑：</p>
<p>  设置信号处理,主函数创建线程池，设置端口复用，绑定端口号，创建epoll对象-&gt;调用epoll_wait函数循环监听epoll事件while(true):</p>
<ul>
<li>-&gt;当检测到客户端接入-&gt;初始化新接收的连接http::init()</li>
<li>-&gt;EPOLLRDHUP | EPOLLHUP | EPOLLERR事件，也就是断开连接或者错误事件，关闭连接http::close_conn()</li>
<li>-&gt;读取请求信息EPOLLIN事件-&gt;http::read()-&gt;成功append到线程池中，失败关闭连接http::close_conn();</li>
<li>-&gt;生成响应EPOLLOUT事件-&gt;http::write()-&gt;成功后http::close_conn();</li>
</ul>
</li>
<li><p>主函数详细流程：</p>
</li>
</ul>
<blockquote>
<p>首先判断进程号是否小于1，小于1则报错<br>获得端口号port，利用atoi()函数将字符串转换成int<br>使用addsig()函数对SIGPIPE信号进行处理<br>创建线程池treadpool<http_conn><em>pool,在堆区创建<br>创建数据保存所有的客户端信息http_conn</em> users&#x3D;new http_conn[ MAX_FD ];<br>创建监听套接字listenfd，PF_INET,流式传输SOCK_STREAM<br>编写sockaddr_in结构address以便后续绑定，设置结构中的sin_addr.s_addr、sin_family、sin_port属性port为htons( port )<br>设置端口复用setsockopt( listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, sizeof( reuse ))函数，其中listenfd为监听文件描述符， SOL_SOCKET为复用level，reuse为端口复用值，1为可以复用<br>将fd和本地的IP + 端口进行绑定ret &#x3D; bind( listenfd, ( struct sockaddr* )&amp;address, sizeof( address ) );<br>监听这个socket上的连接ret &#x3D; listen( listenfd, 5 )<br>创建epoll对象，和事件数组，添加 epoll_event events，int epollfd &#x3D; epoll_create( 5 );<br>将监听的文件描述符添加到epoll对象中addfd( epollfd, listenfd, false );<br><strong>while循环</strong><br>&emsp;调用epoll_wait()成功时，epoll_wait（）返回为请求的I &#x2F; O准备就绪的文件描述符的数目，保存为number<br>&emsp;如果错误输出错误<br>&emsp;循环遍历就绪的文件描述符for ( int i &#x3D; 0; i &lt; number; i++ )<br>&emsp;sockfd &#x3D; events[i].data.fd将准备好的fd读取到sockfd中<br>&emsp;if当sockfd为监听的listenfd时，有客户端链接进来<br>&emsp;elseif当events[i].events为关闭或者错误时，close_conn()关闭连接<br>&emsp;elseif当events[i].event为EPOLLIN事件，将http请求数据  http_conn::read()读取完，再将文件描述符添加到pool中通过append()函数<br>&emsp;elseif当events[i].event为EPOLLOUT事件，生成相应，调用http_conn::write()函数,成功后关闭连接<br>数据销毁：close( epollfd );close( listenfd );delete [] users; delete pool;</p>
</blockquote>
<h3 id="8-2-2-http-conn-read-函数"><a href="#8-2-2-http-conn-read-函数" class="headerlink" title="8.2.2 http_conn::read()函数"></a>8.2.2 http_conn::read()函数</h3><h3 id="8-2-3-http-conn-write-函数"><a href="#8-2-3-http-conn-write-函数" class="headerlink" title="8.2.3 http_conn::write()函数"></a>8.2.3 http_conn::write()函数</h3><h3 id="8-2-4-threadpool-worker工作线程逻辑："><a href="#8-2-4-threadpool-worker工作线程逻辑：" class="headerlink" title="8.2.4 threadpool::worker工作线程逻辑："></a>8.2.4 threadpool::worker工作线程逻辑：</h3><p>流程如下:</p>
<p><code>threadpool::work()</code>-&gt;<code>threadpool::run()</code>-&gt;<code>http_conn::process()</code>-&gt;<code>http_conn::process_read()</code>-&gt;<code>http_conn::process_write()</code></p>
<ul>
<li><p>worker函数，加锁，当工作队列不为空时取出工作队列的第一个，进行process()操作。</p>
</li>
<li><p>process():</p>
<ul>
<li>设置状态HTTP_CODE read_ret为返回值process_read()，其中process_read()进行对http请求报文的解析，若读取状态为NO_REQUEST，则说明没有读取完毕，利用modfd()函数对socket上的epoll事件设置为EPOLLIN，此时return进行继续读取  </li>
<li>读取完毕后进行生成响应bool write_ret为process_write( read_ret )进行响应的生成，若生成完毕则关闭连接，若没结束则利用modfd()函数对socket上的epoll事件设置为EPOLLOUT进行生成响应</li>
</ul>
</li>
<li><p>process_read():有限状态机解析报文</p>
</li>
<li><p>process_write(HTTP_CODE ret)：生成报文</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>webserver</tag>
        <tag>Linux</tag>
        <tag>Epoll</tag>
        <tag>线程池</tag>
        <tag>Reactor</tag>
        <tag>正则与状态机</tag>
      </tags>
  </entry>
  <entry>
    <title>建立个人博客网站详细教程</title>
    <url>/2023/08/09/20230803_blogWebsite/</url>
    <content><![CDATA[<p>使用github+hexo+cloudflare+node.js+next主题建立属于自己的个人博客网站，博客主要分7个部分分别是1 使用git同步github的库，2 安装node.js，3 创建网站（Hexo框架，4 修改主题，5 github图床搭建，6 博客基本功能，7 博客扩展内容(持续更新)。</p>
<p>我主要参考了<a href="https://zhuanlan.zhihu.com/p/102592286">知乎-从零开始搭建个人博客（超详细）</a>这一篇博客，但是由于是2020年的教程，中间有一些坑，并且我在他的基础上增加了一些部分。本博客主要是记录搭建网站的过程，主要是个人记录，但是如果能够帮到其他的人就更好了，大家可以看看我已经搭建好的博客网站 <a href="https://mobbu.space/">“灵能相谈所”</a>。</p>
<p>其实搭建博客并不困难，但是一直坚持写博客并且记录下来属实珍贵，在博主搭建博客搜索教程的过程中，看到有许多以前的网友搭建的博客都已经荒废，但也有很少部分坚持下来，希望我和大家都能坚持记录吧。</p>
<span id="more"></span>

<h1 id="1-使用git同步github的库"><a href="#1-使用git同步github的库" class="headerlink" title="1 使用git同步github的库"></a>1 使用git同步github的库</h1><h2 id="1-1-安装git"><a href="#1-1-安装git" class="headerlink" title="1.1 安装git"></a>1.1 安装git</h2><blockquote>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
</blockquote>
<ol>
<li><p>安装git，打开官方网站<a href="https://git-scm.com/download/win">git官方下载</a>,点击下载windouws64位即可。安装时一直选择默认安装即可，注意安装位置可以不用安装到C盘即可。</p>
</li>
<li><p>测试安装是否成功，点击鼠标右键，出现以下界面即成功</p>
<div align=center><img src = "https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803192109.jpg" width =300></div>
</li>
<li><p>打开Git Bash，输入git，回车，没有出现错误即安装成功</p>
</li>
</ol>
<h2 id="1-2-绑定github"><a href="#1-2-绑定github" class="headerlink" title="1.2 绑定github"></a>1.2 绑定github</h2><p>默认已经有github账户，若没有github账户可直接登录github.com官网注册即可，注意如果有谷歌邮箱，则优先使用谷歌邮箱创建账户，在使用一些国外的软件时，登录会方便一点</p>
<ol>
<li>鼠标右键，打开git bash，输入ssh查看是否安装ssh</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803192758.jpg"></p>
<ol start="2">
<li>输入命令<code>ssh-keygen -t rsa</code> 按照指定RSA算法生成密钥，此时会生成两个文件分别是密钥id_rsa和公钥id_rsa.pub。该文件在~&#x2F;.ssh（C盘当前用户的目录下）中。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803193021.jpg"></p>
<ol start="3">
<li>复制公钥id_rsa.pub中的内容添加到github，用户-&gt;settings-&gt;SSH and GPG keys 中的按键new SSH key，将id_rsa.pub中的内容复制进去即可</li>
</ol>
<div align=center><img src = "https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803193414.jpg" width =400></div>


<ol start="4">
<li>在git bash中输入<code>ssh -T git@github.com</code>进行验证<br>注意：第一次会出现欢迎的语句，输入yes即可</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803193132.jpg"></p>
<h2 id="1-3-提交修改文件"><a href="#1-3-提交修改文件" class="headerlink" title="1.3 提交修改文件"></a>1.3 提交修改文件</h2><p>默认本地没有git仓库</p>
<ol>
<li>在github上新建仓库，记得选择public，创建成功后，点击clone复制网址，如果http不行就使用git。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194258.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194350.jpg"></p>
<ol start="2">
<li>此时，打开你准备放置仓库的文件夹，比如我在D盘创建firstRepo文件夹，打开该文件夹右键打开Git Bash（或者cd到指定文件夹），在bash中输入<code>git clone 复制的网址</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194506.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194820.jpg"></p>
<ol start="3">
<li><p>此时</p>
<ul>
<li>方法一：直接在main branch中修改,依次输入以下指令（每一行为一条指令） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;main&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li>
<li>如果出现问题可以创建新的branch修改后再改回到main branch中，修改完成后记得删除新建的branch，如下命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch newbranch    # 创建新branch</span><br><span class="line">git branch              # 查询现有branch</span><br><span class="line">git checkout newbranch  # 切换到新建的branch</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;newbranch</span><br><span class="line">git checkout main       # 切回main</span><br><span class="line">git merge newbranch     # 修改更新到main branch中</span><br><span class="line">git branch -D newbranch # 删除newbranch</span><br><span class="line">git push -u origin main # 把修改的推到github中的main分支里</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查看github仓库中，出现test文档，验证成功</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804095348.jpg"></p>
<h1 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2 安装node.js"></a>2 安装node.js</h1><ol>
<li><p>在<a href="https://nodejs.org/en">node.js官网</a>下载即可，下载完成后在cmd命令行中输入<code>node -v</code>和<code>npm -v</code>检查一下版本即可</p>
</li>
<li><p>配置环境变量<br>如果不配置，默认在C盘占据空间，还可能会出现安装hexo后无法使用问题</p>
</li>
</ol>
<p>在非系统盘，比如D盘新建文件加nodejs，并且在nodejs中新建node_cache、node_global文件夹，然后再cmd中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>

<p>然后打开系统属性中环境变量，在系统变量中添加变量名为<code>NODE_PATH</code>,值为<code>D:\nodejs\node_global\node_modules</code></p>
<p>再修改用户变量中的<strong>Path</strong>，修改其中的npm的路径到D:\nodejs\node_global</p>
<ol start="3">
<li>测试：在cmd命令下执行<code>npm install webpack -g</code>,执行完毕后webpack模块就在刚刚设置的默认文件夹中了</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804100812.jpg"></p>
<p>Hexo是个人博客网站的框架，安装前需要先在</p>
<h1 id="3-创建网站（Hexo框架）"><a href="#3-创建网站（Hexo框架）" class="headerlink" title="3 创建网站（Hexo框架）"></a>3 创建网站（Hexo框架）</h1><p>个人博客网站使用Hexo框架，首先需要在Github先创建个人的pages</p>
<h2 id="3-1-在github上创建你的个人pages"><a href="#3-1-在github上创建你的个人pages" class="headerlink" title="3.1 在github上创建你的个人pages"></a>3.1 在github上创建你的个人pages</h2><ol>
<li>在github上创建一个仓库，仓库名为：<code>你的github名.github.io</code>如下图(因为博主已经创建页面，所以显示错误)，然后点击创建即可，此时就能打开你的网页，只是其中什么也没有</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804101518.jpg"></p>
<h2 id="3-2-安装Hexo"><a href="#3-2-安装Hexo" class="headerlink" title="3.2 安装Hexo"></a>3.2 安装Hexo</h2><ol>
<li><p>首先建立一个存储静态网页的文件夹，如创建在D盘创建Blog，在该文件夹中打开git Bush，输入 <code>npm install -g hexo-cli</code></p>
</li>
<li><p>安装完成后输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init # 初始化</span><br><span class="line">hexo g # 静态部署</span><br><span class="line">hexo s # 本地预览</span><br></pre></td></tr></table></figure>
<p>此时打开 <a href="http://localhost:4000/">本地调试网址</a> 网址就可查看部署的初始化的网页，按CTRL+C停止该进程。</p>
</li>
<li><p>部署网页后，此时我们需要hexo部署到github上，打开Blog文件夹中的_config.yml文件，记事本打开就行。在文件底部填入</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/你的github名/你的github名.github.io.git  #你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p><strong>注意在Hexo和之后的所有编辑中，冒号后面都需要加上空格</strong></p>
<ol start="4">
<li><p>回到Blog文件夹中，打开Git Bash，安装Git部署插件<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>此时再输入以下三条命令，以后会经常用到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹</span><br><span class="line">hexo d       #生成网站静态文件，并部署到指定仓库</span><br></pre></td></tr></table></figure>
<p><strong>注意：如果需要预览效果，任然可以在<code>hexo g</code>命令部署后，使用<code>hexo s</code>命令在本地进行预览网页效果再决定是否部署到github上</strong></p>
</li>
<li><p>完成后打开浏览器输入 <code>https://xxx.github.io</code>，就可以打开网页，此时网页应该是之前部署的hexo的默认网页。</p>
</li>
</ol>
<h2 id="3-3-使用cloudflare解析域名"><a href="#3-3-使用cloudflare解析域名" class="headerlink" title="3.3 使用cloudflare解析域名"></a>3.3 使用cloudflare解析域名</h2><blockquote>
<p>Cloudflare 是一家全球最著名的 CDN 加速服务商之一，提供了免费和付费的网站加速和保护服务。</p>
</blockquote>
<p>如果你没有域名，或者就准备使用github自带域名，那么不需要看这一part。注意，使用cloudflare在国内可能会速度变慢，但是由于之前博主部署过一些服务，索性CDN就都用的cloudflare。</p>
<p>博主是在阿里云购买的域名，便宜的一年就几块钱。</p>
<ol>
<li><p>以阿里云为例，在控制台你的域名下，点击DNS管理-&gt;DNS修改选项，把DNS服务器修改为fay.ns.cloudflare.com和nile.ns.cloudflare.com，生效可能有一段时间。</p>
</li>
<li><p>然后我们注册cloudflare账户，登录官网注册即可。注册完毕后会让我们添加我们自己的域名，比如mobbu.space。添加成功后，选择免费计划就可以了。</p>
</li>
<li><p>首先修改DNS记录，点击添加如下图的5条记录，其中每一行第一个值是类型，第二个是名称，第三个是IPv4地址或者目标。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804104429.jpg"></p>
<ol start="4">
<li>然后打开Blog&#x2F;source文件夹，添加CNAME文件，可以创建CNAME.txt，记事本打开后写上自己的域名，比如mobbu.space，保存后退出，最后将.txt后缀删除。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804110751.jpg"></p>
<ol start="5">
<li>在BLog文件夹中，将我们修改的内容同步到github中，使用经典三部曲<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g       </span><br><span class="line">hexo d      </span><br></pre></td></tr></table></figure></li>
<li>打开github验证CNAME是否在项目中，打开setting设置查看pages中的custom domain是否修改完毕。修改完成后此时就可以直接输入你的域名进入个人博客网站了，虽然此时其中并没有内容。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804110834.jpg"></p>
<h1 id="4-修改主题"><a href="#4-修改主题" class="headerlink" title="4 修改主题"></a>4 修改主题</h1><p>Next主题源地址为 <a href="https://github.com/theme-next/hexo-theme-next">theme-next&#x2F;hexo-theme-next</a></p>
<table>
<thead>
<tr>
<th align="center">注意事项</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">站点配置文件</td>
<td align="center">Blog&#x2F;_config.yml</td>
</tr>
<tr>
<td align="center">主题配置文件</td>
<td align="center">Blog&#x2F;themes&#x2F;next&#x2F;_config.yml</td>
</tr>
<tr>
<td align="center">修改格式</td>
<td align="center">冒号后都需要空格</td>
</tr>
</tbody></table>
<ol>
<li><p>在Blog&#x2F;theme目录下git clone我们使用的主题NEXT<br><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
</li>
<li><p>打开Blog&#x2F;_config.yml，后文称为<strong>站点配置文件</strong>,进行如下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: “灵能相谈所”         # 你的网站标题</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;道阻且长&#x27;     #个性签名</span><br><span class="line">keywords:</span><br><span class="line">author: mobbu               # 作者</span><br><span class="line">language: zh-CN             # 主题语言</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;   # 时区</span><br></pre></td></tr></table></figure>
</li>
<li><p>next的主题也有四种，可以在Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中修改后自己挑选喜欢的主题(可以使用hexo s命令预览效果)</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini # 博主使用的主题</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改完成后依旧使用三部曲更新部署，每次我们修改后都使用这三条命令将本地修改部分同步到github上，这也是git分布式的体现。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g       </span><br><span class="line">hexo d      </span><br></pre></td></tr></table></figure>

<p>注意，将本地文件部署到github上可能会有一定延迟，这是正常情况，可以稍等一会 再打开个人网站查看效果。</p>
<h1 id="5-github图床搭建"><a href="#5-github图床搭建" class="headerlink" title="5 github图床搭建"></a>5 github图床搭建</h1><p>使用markdown记录时，当我们使用的图片就需要用到图床，可以把图床理解为网络上的图片仓库，使用时调出对应图片的链接即可。</p>
<p>博主这里使用github当作图床，使用第三方的图床总归都有数据丢失的风险。但是我选择使用github当作图床的原因有：1. 我们博客网站本身就通过github实现，那么github停止服务时，网站已经不成立了2. github免费，并且有一些现成的开源项目工具可用使用比较方便。</p>
<p>但是github当作图床也有一些缺点，比如速度可能较慢，还有就是有一定数据丢失风险，解决方法就是定时把数据在本地备份一下，不过这些对于“年轻人”来说可以克服。</p>
<ol>
<li><p>创建github图床仓库，依旧是在repositories中打开New输入你希望的仓库名字即可。</p>
</li>
<li><p>下载PicGo工具，<a href="https://github.com/Molunerfinn/PicGo/releases">picgo下载地址</a>，选择稳定版下载即可。如果github卡顿可以<a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo">山东大学镜像站下载地址</a>下载。</p>
</li>
<li><p>打开picgo-&gt;图床设置-&gt;github,其中设定仓库名就是第一步中配置的，比如你的github账户为<code>mobbu</code>，你的仓库名为<code>img</code>，那么应该填入<code>mobbu/img</code>，以此类推，其中需要设定token，</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/QQ%E6%88%AA%E5%9B%BE20230804112404.jpg"></p>
<ol start="4">
<li>配置token：打开github-&gt;settings-&gt;developer settings，选择tokens(classic)，新建tokens</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804125716.jpg"></p>
<p>新建的页面中填入note就是你token的名字，expiration中选择tokens的时效，直接选永久，然后给仓库的所有权限就可以了，也就是勾上图上的repo，点击完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804125830.jpg"></p>
<p>完成后会出现你的token的值，保存好后复制到之前的设定Token中即可。<br>5. 使用示例</p>
<p>图像上传到上传区之后</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804130355.jpg"></p>
<p>点击相册中的对应图片左下角为复制链接，直接复制到md文件中就可以了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804130446.jpg"></p>
<ol start="6">
<li>一些可能的问题<br> 比如出现：picgo上传失败 请检查配置项和网络的问题<ul>
<li>解决方案：首先检查PicGo设置-&gt;设置Server中的监听端口是否为36677。如果是36677依旧有问题，那么可以修改图床设置-&gt;github-&gt;设定存储路径，修改为一个新的路径，即可上传成功</li>
</ul>
</li>
</ol>
<h1 id="6-博客基本功能"><a href="#6-博客基本功能" class="headerlink" title="6 博客基本功能"></a>6 博客基本功能</h1><h2 id="6-1-一些基础设置"><a href="#6-1-一些基础设置" class="headerlink" title="6.1 一些基础设置"></a>6.1 一些基础设置</h2><ol>
<li>菜单</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的munu部分，把需要的菜单部分前的注释号(#)删掉即可，觉得自己需要哪些部分就设置哪些部分即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                      #首页</span><br><span class="line">  archives: /archives/ || archive      #归档</span><br><span class="line">  categories: /categories/ || th       #分类</span><br><span class="line">  tags: /tags/ || tags                 #标签</span><br><span class="line">  about: /about/ || user               #关于</span><br><span class="line">  #schedule: /schedule/ || calendar    #日历</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span><br><span class="line">  #commonweal: /404/ || heartbeat      #腾讯公益404</span><br></pre></td></tr></table></figure>
<p>如果有自己想要添加的新分类，自行添加即可，但是新添加的菜单需要翻译对应的中文，打开theme&#x2F;next&#x2F;languages&#x2F;zh-CN.yml，在menu下设置就好了</p>
<p>在根目录下打开Git Bash，输入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>此时在根目录的sources文件夹下会生成categories、tags、about三个文件，每个文件中有一个index.md文件，修改内容比如about中的index.md的修改如下，其余的以此类推：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于本站</span><br><span class="line">date: 2023-08-02 20:06:14</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>此时在这个md文档的后边就添加上你想要写的内容，比如about中你可以写上你个人博客包含的内容或者你的一些想法等等。</p>
<ol start="2">
<li>设置头像网站标题</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.gif   # 图片的位置</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true   #头像展示在圈里</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  #头像随光标旋转</span><br></pre></td></tr></table></figure>

<p>此时基本的菜单和头像以及昵称都设置完毕了。</p>
<h2 id="6-2-添加博客流程"><a href="#6-2-添加博客流程" class="headerlink" title="6.2 添加博客流程"></a>6.2 添加博客流程</h2><p>在Blog&#x2F;source&#x2F;_posts中添加需要加入的博客，比如本博客<code>如何建立blog网站.md</code>，然后进行上传三部曲同步到github上即可。注意md文件中可以进行如下设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 建立个人博客网站详细教程</span><br><span class="line">categories: 技术博客</span><br><span class="line">tags:</span><br><span class="line">    - Github</span><br><span class="line">    - hexo</span><br><span class="line">    - cloudflare</span><br><span class="line">    - node.js</span><br><span class="line">    - next主题</span><br><span class="line">    - 个人图床建立</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其中title就是我们博客显示的标题，categories是博客的分类，tags是博客的标签，在这后跟上我们想写的内容即可，其余就是md的一些语法，后序可能考虑更新一下md的一些基础和好用的语法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804200934.jpg"></p>
<h1 id="7-博客扩展内容"><a href="#7-博客扩展内容" class="headerlink" title="7 博客扩展内容"></a>7 博客扩展内容</h1><p>对于网页的一些丰富的内容设置</p>
<ol>
<li>设置建站时间</li>
</ol>
<p>打开themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2023-08   #建站时间</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804200653.jpg"></p>
<ol start="2">
<li>网站图标设置</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，favicon部分，修改对应部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/mob16.jpg            # 网站图标（小）</span><br><span class="line">  medium: /images/mob32.jpg           # 网站图标（中）</span><br><span class="line">  apple_touch_icon: /images/mob.jpeg  # 网站图标（苹果中的图标）</span><br><span class="line">  safari_pinned_tab: /images/mob.svg  # 网站图标（苹果中的矢量图）</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure>
<p>其中将自己喜欢的图片转换成对应分辨率的图片或者对应格式即可，通过搜索引擎搜索很容易找到在线转换的网站。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804201343.jpg"></p>
<ol start="3">
<li>背景图片设置</li>
</ol>
<p>首先在Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，将 style: source&#x2F;_data&#x2F;styles.styl 取消注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>
<p>然后再Blog&#x2F;source文件夹中创建_data&#x2F;styles.styl，其中填入以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(/images/background.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">    // background-size: 100% 100%;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    -webkit-background-size: cover;</span><br><span class="line">    -o-background-size: cover;</span><br><span class="line">    -moz-background-size: cover;</span><br><span class="line">    -ms-background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  opacity: 0.98; //0.98为透明程度，越大越不透明</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line">.sidebar &#123;</span><br><span class="line">  opacity: 0.98;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(255,255,255,0.98);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: 0.98;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>设置预览摘要</li>
</ol>
<p>在md文章中插入 <code>&lt;!-- more --&gt;</code>，该标签之上的是摘要，之后的内容不可见，需点击全文阅读按钮。</p>
<ol start="5">
<li>设置侧边栏显示效果</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，Sidebar Settings部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position. #设置侧边栏位置</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  #  - post    默认显示模式</span><br><span class="line">  #  - always  一直显示</span><br><span class="line">  #  - hide    初始隐藏</span><br><span class="line">  #  - remove  移除侧边栏</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>侧边栏推荐阅读</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中,links部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: fa fa-link</span><br><span class="line">  title: Links Website</span><br><span class="line">  # Available values: block | inline</span><br><span class="line">  layout: block</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  #Title: http://yoursite.com</span><br><span class="line">  mobbu的博客园: https://www.cnblogs.com/mobbu</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>博文置顶</li>
</ol>
<p>首先在根目录Blog打开Git Bash，执行下面的命令</p>
<p>npm uninstall hexo-generator-index –save<br>npm install hexo-generator-index-pin-top –save</p>
<p>然后打开blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: example</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>图片可点击放大查看</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，修改以下部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br><span class="line">jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span><br><span class="line">fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span><br><span class="line">fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span><br></pre></td></tr></table></figure>


<ol start="9">
<li>添加社交链接</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中,social部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/mobbu919 || fab fa-github</span><br><span class="line">  E-Mail: mobbu777@163.com || fa fa-envelope</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>设置博文内超链接为指定颜色</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl文件，添加到最后，修改color中的色号即可修改为指定颜色，这个可以在搜索引擎中查找</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">     color: #0593d3;</span><br><span class="line">     border-bottom: none;</span><br><span class="line">     &amp;:hover &#123;</span><br><span class="line">       color: #0477ab;</span><br><span class="line">       text-decoration: underline;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>显示文章字数和阅读时长</li>
</ol>
<p>首先在Blog目录下打开Git Bash，执行<code>npm install hexo-wordcount --save</code></p>
<p>然后打开Blog&#x2F;_config.yml，添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># symbols_count_time:</span><br><span class="line">  symbols: true                # 文章字数统计</span><br><span class="line">  time: true                   # 文章阅读时长</span><br><span class="line">  total_symbols: true          # 站点总字数统计</span><br><span class="line">  total_time: true             # 站点总阅读时长</span><br><span class="line">  exclude_codeblock: false     # 排除代码字数统计</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>显示站点文章总字数</li>
</ol>
<p>首先在Blog目录下打开Git Bash，执行<code>npm install hexo-wordcount --save</code></p>
<p>然后打开Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig，尾部添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>文章末尾添加版权说明</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的creative_commons部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true  # 将false改为true即可显示版权信息</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<p>此时还需要添加网站url，打开Blog&#x2F;_config.yml，找到url部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://mobbu.space #修改为你的博客地址</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>添加访问量统计</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的busuanzi_count，修改enable属性为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>然后再Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig中最后添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">    &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;!-- 不蒜子计数初始值纠正 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">    var int = setInterval(fixCount, 50);  // 50ms周期检测函数</span><br><span class="line">    var countOffset = 20000;  // 初始化首次数据</span><br><span class="line"></span><br><span class="line">    function fixCount() &#123;            </span><br><span class="line">       if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + countOffset); </span><br><span class="line">            clearInterval(int);</span><br><span class="line">        &#125;                  </span><br><span class="line">        if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + countOffset); // 加上初始数据 </span><br><span class="line">            clearInterval(int); // 停止检测</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">       	</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="15">
<li>添加评论功能</li>
</ol>
<p>使用gitalk评论系统，这是一个可以直接在github上管理评论，不需要再其他平台注册的评论系统。  </p>
<ul>
<li>首先配置github，点击头像Settings-&gt;Developer settings-&gt;OAuth Apps-&gt;New OAuth App进行基本配置</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230809011301.png"></p>
<ul>
<li><p>填写成功后进入，自动生成<code>Client ID</code>和手动点击生成<code>Client Secret</code>，复制好后点击最下方确认键，然后进行以下操作。</p>
</li>
<li><p>然后打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml，修改代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comments:</span><br><span class="line"># Available values: tabs | buttons</span><br><span class="line">style: tabs</span><br><span class="line"># Choose a comment system to be displayed by default.</span><br><span class="line"># Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br><span class="line">active: gitalk  #修改这个部分</span><br><span class="line"># Setting `true` means remembering the comment system selected by the visitor.</span><br><span class="line">storage: true</span><br><span class="line"># Lazyload all comment systems.</span><br><span class="line">lazyload: false</span><br><span class="line"># Modify texts or order for any navs, here are some examples.</span><br><span class="line">nav:</span><br><span class="line">  #disqus:</span><br><span class="line">  #  text: Load Disqus</span><br><span class="line">  #  order: -1</span><br><span class="line">  gitalk:       #修改这个部分</span><br><span class="line">    order: -1   #修改这个部分</span><br><span class="line"></span><br><span class="line">gitalk:</span><br><span class="line">  enable: true    #开启gitalk评论</span><br><span class="line">  github_id:      #github用户名</span><br><span class="line">  repo:           #博客的仓库名称</span><br><span class="line">  ClientID:       #生成的Client ID</span><br><span class="line">  ClientSecret:   #生成的Client Secret</span><br><span class="line">  admin_user:     #github用户名</span><br><span class="line">  distractionFreeMode: true  #默认</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="16">
<li>本地搜索</li>
</ol>
<p>首先在Blog目录下打开Git Bash，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>然后在Blog&#x2F;_config.yml中添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<p>最后打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的local_search部分，将enable修改为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>有可能会出现部署到网站上出现以下问题，并且此时在本地没有出现该问题，此时清除浏览器的缓存就可以解决该问题了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230806161155.jpg"></p>
<ol start="17">
<li>公式支持</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的mathjax部分修改代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">  enable:true</span><br><span class="line">  mhchem:false #需要化学方程式就true</span><br></pre></td></tr></table></figure>

<p>在需要公式的博客最上方记得标注<code>mathjax: true</code>即可。</p>
<ol start="18">
<li>设置canvas nest风格</li>
</ol>
<p>在themes&#x2F;next目录下打开Git Bash，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml，找到canvas-nest，将enable：false改为true：（如果找不到canvas-nest，可能是文件修改了，试试将下面的代码复制粘贴到themes&#x2F;next中）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line"># For more information: https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: false # Display on mobile or not</span><br><span class="line">  color: &quot;27,27,27&quot; # RGB values, use `,` to separate</span><br><span class="line">  opacity: 0.5 # The opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # The number of lines</span><br></pre></td></tr></table></figure>

<p>不过博主觉得动态背景效果不佳，遂最终没有使用该效果。</p>
<p><strong>持续更新中…</strong></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>hexo</tag>
        <tag>cloudflare</tag>
        <tag>node.js</tag>
        <tag>next主题</tag>
        <tag>个人图床建立</tag>
      </tags>
  </entry>
  <entry>
    <title>teamspeak3的简单教程</title>
    <url>/2023/09/17/20230917_teamspeak3/</url>
    <content><![CDATA[<p>联机游戏中，有一个稳定、简洁、占用很小的语音开黑软件是一个很重要的事情。这里我就介绍一下一款使用体验很好的实时语音软件teamspeak，虽然这款有一定的门槛，但是瑕不掩瑜。</p>
<span id="more"></span>

<h1 id="1-下载和安装"><a href="#1-下载和安装" class="headerlink" title="1 下载和安装"></a>1 下载和安装</h1><p>官方网址:<a href="https://teamspeak.com/zh-CN/downloads/">teamspeak</a>，一定要在官网下载，国内有一些盗版的软件，虽然据说只是换皮版本，但是由于我也没看过源代码，不是特别清楚</p>
<p>下载完毕后默认安装即可，其中会提示我们是否安装overwolf，这个可下可不下，主要是一些teamspeak的一些插件。</p>
<h1 id="2-连接服务器和基础功能"><a href="#2-连接服务器和基础功能" class="headerlink" title="2 连接服务器和基础功能"></a>2 连接服务器和基础功能</h1><p>安装完成后，打开软件，可能需要你进行注册，注册完成后打开软件如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image.png"></p>
<p>我们主要使用上面的工具栏进行相应的操作。</p>
<h2 id="2-1-Connections-连接服务器"><a href="#2-1-Connections-连接服务器" class="headerlink" title="2.1 Connections 连接服务器"></a>2.1 Connections 连接服务器</h2><p>点击Connections 连接服务器</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-1.png"></p>
<p>如上图在server address中填入你的服务器名称，在server password中填写你的服务器密码。</p>
<p>经常使用的服务器可以保存为书签bookmarks，下次点击即可直接连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-2.png"></p>
<h2 id="2-2-语音服务器的选择"><a href="#2-2-语音服务器的选择" class="headerlink" title="2.2 语音服务器的选择"></a>2.2 语音服务器的选择</h2><p>有关语音服务器，这里如果你愿意折腾，你可以自己去申请一个公网IP，搞一个自己的服务器，当然这个服务器不一定只用来当作语言服务器，还可以做其他的事情，但是如果如果想省事可以直接租用现有的服务器，简单说这里大概可以分为三个选择：</p>
<ol>
<li>租用现有的teamspeak服务器，最省事，花费也相对较少</li>
<li>租云服务器，比如阿里云、腾讯云、华为云等，然后调试装一些语言服务器必要的开源，这方面也有一些教程，相对比较麻烦</li>
<li>一步到位，自己的空余电脑当作服务器，并且申请公网地址，再进行语言服务器的设置</li>
</ol>
<p>总的来说一般都是租用现有的teamspeak服务器，我是在<a href="https://ts3.com.cn/price">teamspeak服务器网站</a>进行租用的，勉强能用，有时候服务器会出一些问题，但是总体来说可用，省事。</p>
<h2 id="2-3-基础功能介绍"><a href="#2-3-基础功能介绍" class="headerlink" title="2.3 基础功能介绍"></a>2.3 基础功能介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-3.png"></p>
<p>连接到服务器后，选择到响应频道，一般就使用这两个键位，打开&#x2F;关闭麦克风，打开&#x2F;关闭声音</p>
<h1 id="3-基础设置"><a href="#3-基础设置" class="headerlink" title="3 基础设置"></a>3 基础设置</h1><p>主要分为功能设置、交互设置、频道管理设置</p>
<h2 id="3-1-功能设置"><a href="#3-1-功能设置" class="headerlink" title="3.1 功能设置"></a>3.1 功能设置</h2><p>这一部分是必要的设置，如下图的最下方的红色方框options，其余三个部分都是频道管理的部分</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-6.png"></p>
<p>点击打开后的界面如下：<br>可以看到左侧有很多设置，但是我们常用的修改的设置就是playback，也就是输出，还有capture，也就是输入。</p>
<h3 id="3-1-1-输入设置"><a href="#3-1-1-输入设置" class="headerlink" title="3.1.1 输入设置"></a>3.1.1 输入设置</h3><p>设置界面如下图，可以看到主要分为三个部分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-7.png"></p>
<p>主要需要调整三个部分</p>
<ul>
<li><p>第一个部分是输入的设备，在capture device中选择我们想要输入的设备就可以了</p>
</li>
<li><p>第二个部分是语音输入模式，这里只推荐阈值触发模式，也就是说当你的声音达到一定强度时会自动触发输入，选择Voice Activity Detction-&gt;Volume Gate，然后调整下方的滑动条，这个值也就是触发输入的阈值，你可以在begin test选项中进行进一步的调试。</p>
</li>
<li><p>第三个部分是一些数字信号处理，比如回声消除、打字音消除等，全部勾选就可以了</p>
</li>
</ul>
<h3 id="3-1-2-输出设置"><a href="#3-1-2-输出设置" class="headerlink" title="3.1.2 输出设置"></a>3.1.2 输出设置</h3><p>设置界面如下如图，这个部分很简单，设置我们想要输出的设备和大概的声音就可以了<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-8.png"></p>
<h2 id="3-2-交互设置"><a href="#3-2-交互设置" class="headerlink" title="3.2 交互设置"></a>3.2 交互设置</h2><p>交互设置主要就是在如下界面修改，选择self就可以看到了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-4.png"></p>
<p>其中第一个红框是一些默认设置不用修改</p>
<p>第二部分是离线，麦克风和输出的功能按钮</p>
<p>第三个部分就是我们需要设置的交互设置了：</p>
<ul>
<li>change nickname ：修改在本服务器的昵称</li>
<li>set avatar：修改在本服务器的头像</li>
<li>delete avatar：删除头像</li>
</ul>
<h2 id="3-3-频道管理设置"><a href="#3-3-频道管理设置" class="headerlink" title="3.3 频道管理设置"></a>3.3 频道管理设置</h2><p>如果你是一个服务器的拥有者，那么你肯定想要对不同的玩家有不同的权限，否则会乱套，其中主要分为管理员、会员、游客三种权限、</p>
<ul>
<li>管理员 ：<ul>
<li>能够创建频道、删除频道</li>
<li>进入加锁的频道</li>
<li>移动管理员或以下权限的人到任意频道</li>
<li>授予&#x2F;撤销管理员、会员、游客权限</li>
</ul>
</li>
<li>会员：会员能做到管理员大部分事情<ul>
<li>能够创建频道、删除频道</li>
<li>进入加锁的频道</li>
<li>移动会员或以下权限的人到任意频道</li>
<li>授予&#x2F;撤销会员、游客权限</li>
</ul>
</li>
<li>游客：没有权限</li>
</ul>
<p>所以一般给个会员权限就够了，权限设置如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/image-5.png"></p>
<p>选择设置server groups，打开后默认是超级管理员、管理员和游客，可以对每一个权限进行修改，比如修改名字和头像，改成自己想要的名字以增加趣味性，比如超级管理员修改为超级赛亚人并且配上相应的头像等。在设置的左下角也可以加上其余的权限等级来细化一些权限，这个就自行设置了。</p>
<p>当你是会员以上的权限时，这时你就可以对服务器进行一个频道的划分，比如lol、csgo、观赛等分区，根据你的小团体的游戏成分进行划分即可。记得创建频道的时候选择永久，否则下一次登陆的时候就会消失</p>
<h1 id="4-服务器的进一步设置"><a href="#4-服务器的进一步设置" class="headerlink" title="4 服务器的进一步设置"></a>4 服务器的进一步设置</h1><p>主要是进行一些界面的优化，一些个性化的设置，比如设置频道的介绍、频道的icon图等等</p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>分享博客</category>
      </categories>
      <tags>
        <tag>teamspeak</tag>
        <tag>语音服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>解析经典排序算法</title>
    <url>/2023/08/23/20230821_SortingAlgorithmSummary/</url>
    <content><![CDATA[<p>总结常用的排序算法，比如快速排序、选择排序、桶排序、堆排序、冒泡排序，分别进行原理分析，复杂度分析，使用场景区分，适用的数据结构，并进行对比总结。</p>
<span id="more"></span>

<p>首先总结表如下：</p>
<table>
<thead>
<tr>
<th align="center">排序方法</th>
<th align="center">平均时间复杂度</th>
<th align="center">最好情况</th>
<th align="center">最坏情况</th>
<th align="center">空间复杂度</th>
<th align="center">是否稳定</th>
<th align="center">排序方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">冒泡排序</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(n)$</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(1)$</td>
<td align="center">稳定</td>
<td align="center">内部排序</td>
</tr>
<tr>
<td align="center">选择排序</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(1)$</td>
<td align="center">不稳定</td>
<td align="center">内部排序</td>
</tr>
<tr>
<td align="center">插入排序</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(n)$</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(1)$</td>
<td align="center">稳定</td>
<td align="center">内部排序</td>
</tr>
<tr>
<td align="center">希尔排序</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n\log ^2 n)$</td>
<td align="center">$O(n\log ^2 n)$</td>
<td align="center">$O(1)$</td>
<td align="center">不稳定</td>
<td align="center">内部排序</td>
</tr>
<tr>
<td align="center">快速排序</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(\log n)$</td>
<td align="center">不稳定</td>
<td align="center">内部排序</td>
</tr>
<tr>
<td align="center">归并排序</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n)$</td>
<td align="center">稳定</td>
<td align="center">外部排序</td>
</tr>
<tr>
<td align="center">堆排序</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(n\log n)$</td>
<td align="center">$O(1)$</td>
<td align="center">不稳定</td>
<td align="center">内部排序</td>
</tr>
<tr>
<td align="center">桶排序</td>
<td align="center">$O(n+k)$</td>
<td align="center">$O(n+k)$</td>
<td align="center">$O(n^2)$</td>
<td align="center">$O(k)$</td>
<td align="center">稳定</td>
<td align="center">外部排序</td>
</tr>
<tr>
<td align="center">计数排序</td>
<td align="center">$O(n+k)$</td>
<td align="center">$O(n+k)$</td>
<td align="center">$O(n+k)$</td>
<td align="center">$O(k)$</td>
<td align="center">稳定</td>
<td align="center">外部排序</td>
</tr>
</tbody></table>
<h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1 冒泡排序"></a>1 冒泡排序</h1><h2 id="1-1-算法简述"><a href="#1-1-算法简述" class="headerlink" title="1.1 算法简述"></a>1.1 算法简述</h2><p>两两比较，选出较大值，每一轮选出单轮最大值到数组末端，这个过程就像泡泡变大的过程，所以交冒泡算法。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//int flag = 0;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[j], nums[j + <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">//flag = 1;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//if(flag == 0) return;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-优化"><a href="#1-2-优化" class="headerlink" title="1.2 优化"></a>1.2 优化</h2><p>定义一个flag，只要进行交换就置为1.当某一次内层for循环没有交换过flag为0，那么说明已经排序好了</p>
<h2 id="1-3-最好情况"><a href="#1-3-最好情况" class="headerlink" title="1.3 最好情况"></a>1.3 最好情况</h2><p>数组已经是正序排列时，仅有比较，没有交换</p>
<h2 id="1-4-最坏情况"><a href="#1-4-最坏情况" class="headerlink" title="1.4 最坏情况"></a>1.4 最坏情况</h2><p>数组是反序排列时，每一轮都需要交换</p>
<h1 id="2选择排序"><a href="#2选择排序" class="headerlink" title="2选择排序"></a>2选择排序</h1><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p>
<h2 id="2-1-算法简述"><a href="#2-1-算法简述" class="headerlink" title="2.1 算法简述"></a>2.1 算法简述</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p>
<p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p>
<p>重复第二步，直到所有元素均排序完毕。</p>
<h2 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[min] &gt; nums[j]) min = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[min], nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3 插入排序"></a>3 插入排序</h1><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p>
<h2 id="3-1-算法简述"><a href="#3-1-算法简述" class="headerlink" title="3.1 算法简述"></a>3.1 算法简述</h2><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p>
<p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p>
<h2 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2 代码"></a>3.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertion_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> num = nums[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; num &lt; nums[j]) &#123;</span><br><span class="line">            <span class="comment">// 当j大于0且有序区间值大于num时，向左移动</span></span><br><span class="line">            nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//优化，折半查找法</span></span><br><span class="line">        nums[j + <span class="number">1</span>] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-3优化"><a href="#3-3优化" class="headerlink" title="3.3优化"></a>3.3优化</h2><p>已排序的序列中，序列元素都是按照顺序排列的，直接比较已排序序列的中位数，这个中间的位置将一排序列分为左右两部分，通过一次比较后，就缩小了比较的范围，重复这样的操作，需要插入的元素就找到了合适的位置了。</p>
<h1 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4 希尔排序"></a>4 希尔排序</h1><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p>
<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<p>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；<br>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；<br>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p>
<h2 id="4-1-算法简述"><a href="#4-1-算法简述" class="headerlink" title="4.1 算法简述"></a>4.1 算法简述</h2><p>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk &#x3D; 1；</p>
<p>按增量序列个数 k，对序列进行 k 趟排序；</p>
<p>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>
<h2 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">3</span> * h &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= h &amp;&amp; nums[j] &lt; nums[j - h]; j -= h) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[j], nums[j - h]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h = h / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5 快速排序"></a>5 快速排序</h1><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p>
<p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>
<p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p>
<p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好，可是这是为什么呢，我也不知道。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p>
<p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p>
<h2 id="5-1-算法简述"><a href="#5-1-算法简述" class="headerlink" title="5.1 算法简述"></a>5.1 算法简述</h2><ol>
<li><p>从数列中挑出一个元素，称为 “基准”（pivot）;</p>
</li>
<li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p>
</li>
<li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p>
</li>
</ol>
<h2 id="5-2-代码"><a href="#5-2-代码" class="headerlink" title="5.2 代码"></a>5.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Paritition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回基准pivot的nums的序号</span></span><br><span class="line">    <span class="type">int</span> pivot = nums[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">//将nums分为小于基准和大于基准的两侧</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[high] &gt;= pivot) --high;</span><br><span class="line">        nums[low] = nums[high];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[low] &lt;= pivot) ++low;</span><br><span class="line">        nums[high] = nums[low];</span><br><span class="line">    &#125;</span><br><span class="line">    nums[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">Paritition</span>(nums, low, high);</span><br><span class="line">        <span class="built_in">QuickSort</span>(nums, low, pivot - <span class="number">1</span>);<span class="comment">//递归小于基准部分</span></span><br><span class="line">        <span class="built_in">QuickSort</span>(nums, pivot + <span class="number">1</span>, high);<span class="comment">//递归大于基准部分</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">QuickSort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6 归并排序"></a>6 归并排序</h1><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>
<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>
<p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；<br>自下而上的迭代；</p>
<p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p>
<h2 id="6-1-算法简述"><a href="#6-1-算法简述" class="headerlink" title="6.1 算法简述"></a>6.1 算法简述</h2><ol>
<li><p>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</p>
</li>
<li><p>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</p>
</li>
<li><p>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</p>
</li>
<li><p>重复步骤 3 直到某一指针达到序列尾；</p>
</li>
<li><p>将另一序列剩下的所有元素直接复制到合并序列尾。</p>
</li>
</ol>
<h2 id="6-2-代码"><a href="#6-2-代码" class="headerlink" title="6.2 代码"></a>6.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> front, <span class="type">int</span> mid, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">LeftSubArray</span><span class="params">(nums.begin() + front, nums.begin() + mid + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">RightSubArray</span><span class="params">(nums.begin() + mid + <span class="number">1</span>, nums.begin() + end + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> idxLeft = <span class="number">0</span>, idxRight = <span class="number">0</span>;</span><br><span class="line">    LeftSubArray.<span class="built_in">insert</span>(LeftSubArray.<span class="built_in">end</span>(), numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>());</span><br><span class="line">    RightSubArray.<span class="built_in">insert</span>(RightSubArray.<span class="built_in">end</span>(), numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = front; i &lt;= end; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LeftSubArray[idxLeft] &lt; RightSubArray[idxRight]) &#123;</span><br><span class="line">            nums[i] = LeftSubArray[idxLeft];</span><br><span class="line">            idxLeft++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[i] = RightSubArray[idxRight];</span><br><span class="line">            idxRight++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> front, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (front &gt;= end) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (front + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">MergeSort</span>(nums, front, mid);</span><br><span class="line">    <span class="built_in">MergeSort</span>(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">    <span class="built_in">Merge</span>(nums, front, mid, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">MergeSort</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-堆排序"><a href="#7-堆排序" class="headerlink" title="7 堆排序"></a>7 堆排序</h1><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>
<p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；<br>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；<br>堆排序的平均时间复杂度为 Ο(nlogn)。</p>
<h2 id="7-1-算法简述"><a href="#7-1-算法简述" class="headerlink" title="7.1 算法简述"></a>7.1 算法简述</h2><ol>
<li><p>创建一个堆 H[0……n-1]；</p>
</li>
<li><p>把堆首（最大值）和堆尾互换；</p>
</li>
<li><p>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p>
</li>
<li><p>重复步骤 2，直到堆的尺寸为 1。</p>
</li>
</ol>
<h2 id="7-2-代码"><a href="#7-2-代码" class="headerlink" title="7.2 代码"></a>7.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">max_heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> dad = start;</span><br><span class="line">    <span class="type">int</span> son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (son &lt;= end) &#123; </span><br><span class="line">        <span class="keyword">if</span> (son + <span class="number">1</span> &lt;= end &amp;&amp; arr[son] &lt; arr[son + <span class="number">1</span>]) </span><br><span class="line">            son++;</span><br><span class="line">        <span class="keyword">if</span> (arr[dad] &gt; arr[son]) </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="built_in">swap</span>(arr[dad], arr[son]);</span><br><span class="line">            dad = son;</span><br><span class="line">            son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">max_heapify</span>(arr, i, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);</span><br><span class="line">        <span class="built_in">max_heapify</span>(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8 计数排序"></a>8 计数排序</h1><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<p>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 Θ(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p>
<p>由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>
<p>类似于哈希法</p>
<h2 id="8-1-算法简述"><a href="#8-1-算法简述" class="headerlink" title="8.1 算法简述"></a>8.1 算法简述</h2><p>（1）找出待排序的数组中最大和最小的元素<br>（2）统计数组中每个值为i的元素出现的次数，存入数组C的第i项<br>（3）对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）<br>（4）反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</p>
<h2 id="8-2-代码"><a href="#8-2-代码" class="headerlink" title="8.2 代码"></a>8.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9 桶排序"></a>9 桶排序</h1><h2 id="9-1-算法简述"><a href="#9-1-算法简述" class="headerlink" title="9.1 算法简述"></a>9.1 算法简述</h2><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>
<p>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p>
<h2 id="9-2-代码"><a href="#9-2-代码" class="headerlink" title="9.2 代码"></a>9.2 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> BUCKET_NUM = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">ListNode</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>)</span>:mData(i),mNext(NULL)&#123;</span>&#125;</span><br><span class="line">        ListNode* mNext;</span><br><span class="line">        <span class="type">int</span> mData;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">insert</span><span class="params">(ListNode* head,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        ListNode dummyNode;</span><br><span class="line">        ListNode *newNode = <span class="keyword">new</span> <span class="built_in">ListNode</span>(val);</span><br><span class="line">        ListNode *pre,*curr;</span><br><span class="line">        dummyNode.mNext = head;</span><br><span class="line">        pre = &amp;dummyNode;</span><br><span class="line">        curr = head;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">NULL</span>!=curr &amp;&amp; curr-&gt;mData&lt;=val)&#123;</span><br><span class="line">                pre = curr;</span><br><span class="line">                curr = curr-&gt;mNext;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;mNext = curr;</span><br><span class="line">        pre-&gt;mNext = newNode;</span><br><span class="line">        <span class="keyword">return</span> dummyNode.mNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode *head1,ListNode *head2)</span></span>&#123;</span><br><span class="line">        ListNode dummyNode;</span><br><span class="line">        ListNode *dummy = &amp;dummyNode;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">NULL</span>!=head1 &amp;&amp; <span class="literal">NULL</span>!=head2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(head1-&gt;mData &lt;= head2-&gt;mData)&#123;</span><br><span class="line">                        dummy-&gt;mNext = head1;</span><br><span class="line">                        head1 = head1-&gt;mNext;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dummy-&gt;mNext = head2;</span><br><span class="line">                        head2 = head2-&gt;mNext;</span><br><span class="line">                &#125;</span><br><span class="line">                dummy = dummy-&gt;mNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span>!=head1) dummy-&gt;mNext = head1;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span>!=head2) dummy-&gt;mNext = head2;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> dummyNode.mNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BucketSort</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> arr[])</span></span>&#123;</span><br><span class="line">        <span class="function">vector&lt;ListNode*&gt; <span class="title">buckets</span><span class="params">(BUCKET_NUM,(ListNode*)(<span class="number">0</span>))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                <span class="type">int</span> index = arr[i]/BUCKET_NUM;</span><br><span class="line">                ListNode *head = buckets.<span class="built_in">at</span>(index);</span><br><span class="line">                buckets.<span class="built_in">at</span>(index) = <span class="built_in">insert</span>(head,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *head = buckets.<span class="built_in">at</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;BUCKET_NUM;++i)&#123;</span><br><span class="line">                head = <span class="built_in">Merge</span>(head,buckets.<span class="built_in">at</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">                arr[i] = head-&gt;mData;</span><br><span class="line">                head = head-&gt;mNext;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-最好情况"><a href="#9-3-最好情况" class="headerlink" title="9.3 最好情况"></a>9.3 最好情况</h2><p>当输入的数据可以均匀的分配到每一个桶中。</p>
<h2 id="9-4-最坏情况"><a href="#9-4-最坏情况" class="headerlink" title="9.4 最坏情况"></a>9.4 最坏情况</h2><p>当输入的数据被分配到了同一个桶中。</p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置C++环境</title>
    <url>/2023/08/22/20230822_VscodeDeployC++/</url>
    <content><![CDATA[<p>因为目前还是一些简单的项目或者笔试题，所以想要实现vscode大一统的最后一步，在vscode上配置C++环境。</p>
<span id="more"></span>

<h1 id="1-下载GCC编译器"><a href="#1-下载GCC编译器" class="headerlink" title="1 下载GCC编译器"></a>1 下载GCC编译器</h1><p>官方github地址为<a href="https://github.com/niXman/mingw-builds-binaries/releases">mingw-builds-binaries</a>，在其中选择对应系统的版本进行下载即可，比如windows64位，就下载下图对应版本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230822163656.png"></p>
<p>解压到一个没有中文和空格的路径中，将安装的bin文件夹路径添加到系统变量</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230822164757.png"></p>
<p>完成后，打开cmd，输入<code>gcc -v</code>验证是否成功</p>
<h1 id="2-安装VSCODE的C-C-扩展"><a href="#2-安装VSCODE的C-C-扩展" class="headerlink" title="2 安装VSCODE的C&#x2F;C++扩展"></a>2 安装VSCODE的C&#x2F;C++扩展</h1><p>直接在扩展中间安装C&#x2F;C++扩展即可</p>
<p>此时创建我们所要使用的文件夹，此时我出现一个问题，在D盘中创建文件夹无法检测到我安装的编译器，但是我在C盘中创建文件夹就没有这个问题，所幸消耗空间不多，勉强在C盘创建时用了。</p>
<p>创建文件test.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//include如果出错，说明是编译器问题，去C盘创建则没有问题</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;success&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试是否运行成功</p>
<h1 id="3-使用VSCODE进行运行和调试"><a href="#3-使用VSCODE进行运行和调试" class="headerlink" title="3 使用VSCODE进行运行和调试"></a>3 使用VSCODE进行运行和调试</h1><h2 id="3-1-运行"><a href="#3-1-运行" class="headerlink" title="3.1 运行"></a>3.1 运行</h2><p>编写一个排序的cpp，如果想直接运行，那么直接打开终端先c++编译一下，运行即可，比如我的文件是SortAlgrithm.cpp，那么打开终端，输入<code>g++ SortAlgrithm.cpp -o SortAlgm.exe</code>，此时该目录下会出现该文件，输入<code>./SortAlgm.exe</code>，直接运行即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230822185849.png"></p>
<p>比如我这里就是将<code>&#123; 7,6,3,9,1,8,2,4,5 &#125;</code>进行排序输出。</p>
<h2 id="3-2-调试"><a href="#3-2-调试" class="headerlink" title="3.2 调试"></a>3.2 调试</h2><p>比如继续调试上述的代码，如上图我在代码中设置断点，我们当然可以通过GDB直接在终端进行调试，但是这样显然比较麻烦，所以我们可以再VSCODE侧边栏打开调试，点击运行和调试按钮即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230822190139.png"></p>
<p>当我们打开之后就会出现以下调试界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230822190313.png"></p>
<p>这个界面相信大家都很眼熟了，跟VS的操作界面基本一致，进行代码的调试就好了。</p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>博客网站分布管理</title>
    <url>/2023/10/01/20231001_blogDistributeToMacOS/</url>
    <content><![CDATA[<p>等到要换电脑的时候，发现我在本地管理github pages需要移植一下，博客记录一下移植过程，方便以后查阅，由于博主心血来潮换了mac，这时候需要在MacOS上继续进行配置了。</p>
<span id="more"></span>
<h1 id="安装各种环境"><a href="#安装各种环境" class="headerlink" title="安装各种环境"></a>安装各种环境</h1><h2 id="检查git"><a href="#检查git" class="headerlink" title="检查git"></a>检查git</h2><p>一般mac都会自带git，所以只需要输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>检查一下版本即可</p>
<h2 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h2><p>首先先安装nvm，也就是node.js的管理工具。在nvm的github官方仓库下载最新版本安装即可。</p>
<p>安装完成后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">commond -v nvm</span><br></pre></td></tr></table></figure>

<p>出现nvm即安装成功</p>
<h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p>然后按照以下步骤进行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install stable  # 使用 nvm 安装最新稳定版 Node.js</span><br><span class="line">nvm use stable     # 使用刚刚安装的 Node.js 版本</span><br><span class="line"></span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>安装的时候可能会遇到出现<strong>http fetch GET 200</strong>的问题，此时只需要多等待几分钟即可。</p>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>输入以下命令进行安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>此时就可以将我们之前的博客文件夹迁移到mac当地，在文件夹中打开iTerm终端，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>本地测试没有问题之后则本地环境调试成功。</p>
<h1 id="连接到github"><a href="#连接到github" class="headerlink" title="连接到github"></a>连接到github</h1><h2 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h2><p>首先配置git账户，设置user.name和user.email，输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;account name&quot;     # 设置用户名</span><br><span class="line">git config --global user.email &quot;account email&quot;     # 设置邮箱地址</span><br></pre></td></tr></table></figure>

<p>设置完毕之后，就可以生成SSH KEY了，输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C example@mail.com</span><br></pre></td></tr></table></figure>
<p>这里输入你自己的邮箱即可<br>然后输入以下两条命令查看并复制你的密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure>

<h2 id="github添加SSH-key"><a href="#github添加SSH-key" class="headerlink" title="github添加SSH key"></a>github添加SSH key</h2><p>制公钥id_rsa.pub中的内容添加到github，用户-&gt;settings-&gt;SSH and GPG keys 中的按键new SSH key，将id_rsa.pub中的内容复制进去即可</p>
<p>添加完成后，在终端输入<code>ssh -T git@github.com</code>进行验证，此时会让你输入刚刚在生成ssh密钥时输入的密码，输入后回车会看到欢迎的语句，此时说明配对成功。</p>
<h1 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h1><p>此时将本博客放入博文推送的文件中，hexo clean，hexo g hexo d三部曲后，验证是否上传成功即可。</p>
<p>验证时，发现这台机器还没有git push上传过，此时需要重新申请tokens，在github账户中，配置token的流程如下：  </p>
<p>打开github-&gt;settings-&gt;developer settings，选择tokens(classic)，新建tokens。  </p>
<p>此时上传(hexo d)时会要求我们输入账户和密码，账户就是github的账户，而密码就是刚刚申请的token值，具体步骤可以查看我的建立博客的博文–<a href="https://mobbu.space/2023/08/09/20230803_blogWebsite/">建立个人博客网站详细教程</a></p>
<p>此时就能上传验证成功了。</p>
<h1 id="图床软件picgo移植"><a href="#图床软件picgo移植" class="headerlink" title="图床软件picgo移植"></a>图床软件picgo移植</h1><ol>
<li>下载软件<br>在picgo的github开源地址下载2.3.1的稳定版，选择下载arm64.pmg格式。</li>
</ol>
<p>下载后打开会出现文件已损坏的问题，这是因为没有签名，此时打开终端输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable #此时要输入密码</span><br><span class="line">xattr -cr /Applications/PicGo.app</span><br></pre></td></tr></table></figure>
<p>输入上述两条命令后就能顺利打开</p>
<ol start="2">
<li>软件配置</li>
</ol>
<p>此处按照博客教程中步骤来即可设置好仓库名，地址，主要是设置好github的token，设置好后进行测试，随便上传一张图片，比如下图，验证成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20231004161235.png"></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>博客网站</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>单例设计模式简单实现</title>
    <url>/2023/09/19/20230919_SingletonWithThreadpool/</url>
    <content><![CDATA[<p>软件设计模式中的最简单的设计模式的实现，主要是应用在线程池中。分为单例模式介绍、线程池实现两部分</p>
<span id="more"></span>

<h1 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1 单例模式"></a>1 单例模式</h1><p>单例模式（Singleton Pattern）是软件设计模式中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p>单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供了一个全局访问点来访问该实例。</p>
<p>注意：</p>
<p>1、单例类只能有一个实例。<br>2、单例类必须自己创建自己的唯一实例。<br>3、单例类必须给所有其他对象提供这一实例。  </p>
<p>单例模式图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230917163929.png"></p>
<p>简要的示例如下：  </p>
<ol>
<li>懒汉版：单例实例在第一次被使用时才进行初始化，这叫做延迟初始化。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// version 1.0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> Singleton* instance;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>() &#123;&#125;;</span><br><span class="line">	~<span class="built_in">Singleton</span>() &#123;&#125;;</span><br><span class="line">	<span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">	Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">NULL</span>) </span><br><span class="line">			instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init static member</span></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>但是这样做有内存泄漏的问题，有两种解决办法：</p>
<ol>
<li>智能指针</li>
<li>静态的嵌套类的对象</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// version 1.1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> Singleton* instance;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>() &#123; &#125;;</span><br><span class="line">	~<span class="built_in">Singleton</span>() &#123; &#125;;</span><br><span class="line">	<span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">	Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">Deletor</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		~<span class="built_in">Deletor</span>() &#123;</span><br><span class="line">			<span class="keyword">if</span>(Singleton::instance != <span class="literal">NULL</span>)</span><br><span class="line">				<span class="keyword">delete</span> Singleton::instance;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">static</span> Deletor deletor;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init static member</span></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">NULL</span>;</span><br><span class="line">Singleton::Deletor Singleton::deletor;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>饿汉版</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// version 1.3</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> Singleton instance;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>();</span><br><span class="line">	~<span class="built_in">Singleton</span>();</span><br><span class="line">	<span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">	Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> Singleton&amp; <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize defaultly</span></span><br><span class="line">Singleton Singleton::instance;</span><br></pre></td></tr></table></figure>

<h1 id="2-在线程池中实现单例模式"><a href="#2-在线程池中实现单例模式" class="headerlink" title="2 在线程池中实现单例模式"></a>2 在线程池中实现单例模式</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">threadpool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> threadpool* instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> threadpool* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance == <span class="literal">NULL</span>) </span><br><span class="line">			instance = <span class="keyword">new</span> <span class="built_in">threadpool</span>();</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">append</span><span class="params">(T *request, <span class="type">int</span> state)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">append_p</span><span class="params">(T *request)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*thread_number是线程池中线程的数量，max_requests是请求队列中最多允许的、等待处理的请求的数量*/</span></span><br><span class="line">    <span class="built_in">threadpool</span>(<span class="type">int</span> actor_model, connection_pool *connPool, <span class="type">int</span> thread_number = <span class="number">8</span>, <span class="type">int</span> max_request = <span class="number">10000</span>);</span><br><span class="line">    ~<span class="built_in">threadpool</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*工作线程运行的函数，它不断从工作队列中取出任务并执行之*/</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> *<span class="title">worker</span><span class="params">(<span class="type">void</span> *arg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_thread_number;        <span class="comment">//线程池中的线程数</span></span><br><span class="line">    <span class="type">int</span> m_max_requests;         <span class="comment">//请求队列中允许的最大请求数</span></span><br><span class="line">    <span class="type">pthread_t</span> *m_threads;       <span class="comment">//描述线程池的数组，其大小为m_thread_number</span></span><br><span class="line">    std::list&lt;T *&gt; m_workqueue; <span class="comment">//请求队列</span></span><br><span class="line">    locker m_queuelocker;       <span class="comment">//保护请求队列的互斥锁</span></span><br><span class="line">    sem m_queuestat;            <span class="comment">//是否有任务需要处理</span></span><br><span class="line">    connection_pool *m_connPool;  <span class="comment">//数据库</span></span><br><span class="line">    <span class="type">int</span> m_actor_model;          <span class="comment">//模型切换</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>软件设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>C++智能指针</title>
    <url>/2023/09/20/20230920_SmartPtr/</url>
    <content><![CDATA[<p>简要介绍一下C++11以后的智能指针，有<code>std::unique_ptr&lt;T&gt;</code>，<code>std::shared_ptr&lt;T&gt;</code>，<code>std::weak_ptr&lt;T&gt;</code>，并且废弃了<code>std::auto_ptr&lt;T&gt;</code></p>
<span id="more"></span>

<p>首先智能指针是一个RAII类模型，用于动态分配内存，其设计思想是将基本类型指针封装为（模板）类对象指针，并在离开作用域时调用析构函数，使用delete删除指针所指向的内存空间。</p>
<p>智能指针的作用是，能够处理内存泄漏问题和空悬指针问题。</p>
<ul>
<li><p>对于unique_ptr，实现独占式拥有的概念，同一时间只能有一个智能指针可以指向该对象，因为无法进行拷贝构造和拷贝赋值，但是可以进行移动构造和移动赋值；</p>
</li>
<li><p>对于shared_ptr，实现共享式拥有的概念，即多个智能指针可以指向相同的对象，该对象及相关资源会在其所指对象不再使用之后，自动释放与对象相关的资源；</p>
</li>
<li><p>对于weak_ptr，解决shared_ptr相互引用时，两个指针的引用计数永远不会下降为0，从而导致死锁问题。而weak_ptr是对对象的一种弱引用，可以绑定到shared_ptr，但不会增加对象的引用计数。</p>
</li>
</ul>
<h1 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h1><p>每个 unique_ptr 指针指向的堆内存空间的引用计数，都只能为 1，一旦该 unique_ptr 指针放弃对所指堆内存空间的所有权，则该空间会被立即释放回收。</p>
<ul>
<li><p>创建unique_ptr  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建空的unique_ptr</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p2</span><span class="params">(<span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="comment">// 有指向的</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="comment">// 创建空的unique_ptr</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p4</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p5</span><span class="params">(p4)</span></span>;<span class="comment">//错误的，没有拷贝构造</span></span><br><span class="line"><span class="function">std::unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">p5</span><span class="params">(std::move(p4))</span></span>;<span class="comment">//正确的，有移动构造</span></span><br></pre></td></tr></table></figure>
<p>值得一提的是，对于调用移动构造函数的 p4 和 p5 来说，p5 将获取 p4 所指堆空间的所有权，而 p4 将变成空指针（nullptr）。</p>
</li>
<li><p>unique_ptr 可以指向一个数组</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="type">int</span>[]&gt; uptr = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>[]&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    uptr[i] = i * i;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; uptr[i] &lt;&lt; std::endl;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

</li>
<li><p>C++14新增make_unique</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; p1 = <span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">auto</span> p2 = <span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>将unique_ptr转换成shared_ptr类型<br>转换条件：如果unique_ptr为右值时，他就可以赋值给shared_ptr。<br>原因：因为shared_ptr包含一个显示构造函数，可用于将右值unique_ptr转换为shared_ptr，shared_ptr将接管原来归unqiue_ptr所拥有的对象。</p>
</li>
<li><p>unique_ptr的简单实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UniquePtr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">UniquePtr</span>(T *pResource = <span class="literal">NULL</span>)</span><br><span class="line">		: <span class="built_in">m_pResource</span>(pResource) &#123;&#125;</span><br><span class="line">	~<span class="built_in">UniquePtr</span>()&#123; <span class="built_in">del</span>();&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(T* pResource)</span></span>&#123;<span class="comment">// 先释放资源(如果持有), 再持有资源</span></span><br><span class="line">		<span class="built_in">del</span>();</span><br><span class="line">		m_pResource = pResource;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T* <span class="title">release</span><span class="params">()</span></span>&#123;<span class="comment">// 返回资源，资源的释放由调用方处理</span></span><br><span class="line">		T* pTemp = m_pResource;</span><br><span class="line">		m_pResource = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">return</span> pTemp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T* <span class="title">get</span><span class="params">()</span></span>&#123;<span class="comment">// 获取资源，调用方应该只使用不释放，否则会两次delete资源</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> m_pResource;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="type">const</span></span>&#123; <span class="comment">// 是否持有资源</span></span><br><span class="line">		<span class="keyword">return</span> m_pResource != <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	T&amp; <span class="keyword">operator</span> * ()&#123;</span><br><span class="line">		<span class="keyword">return</span> *m_pResource;</span><br><span class="line">	&#125;</span><br><span class="line">	T* <span class="keyword">operator</span> -&gt; ()&#123;</span><br><span class="line">		<span class="keyword">return</span> m_pResource;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="literal">nullptr</span> == m_pResource) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">delete</span> m_pResource;</span><br><span class="line">		m_pResource = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">UniquePtr</span>(<span class="type">const</span> UniquePtr &amp;) = <span class="keyword">delete</span>; <span class="comment">// 禁用拷贝构造</span></span><br><span class="line">	UniquePtr&amp; <span class="keyword">operator</span> = (<span class="type">const</span> UniquePtr &amp;) = <span class="keyword">delete</span>; <span class="comment">// 禁用拷贝赋值</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T *m_pResource;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h1><p>参考<a href="https://zhuanlan.zhihu.com/p/521454381">C++ 智能指针详解（二）——shared_ptr与weak_ptr</a></p>
<ul>
<li><p>特点总结如下</p>
<ul>
<li>共享所有权</li>
<li>存储成本较裸指针多了个引用计数指针（相关控制块-共享）</li>
<li>接口慎用（会导致蔓延问题）</li>
<li>线程安全，引用计数增减会减慢多核性能</li>
<li>支持拷贝构造，支持移动</li>
</ul>
</li>
<li><p>shared_ptr使用注意事项</p>
<ul>
<li>避免循环引用，解决办法使用弱引用指针</li>
<li>避免对原始指针多于两组的所有权（使用enable_shared_from_this&lt;&gt;避免this被多组所有权）</li>
<li>避免在shared引用对象成员中再次使用shared_ptr，这样会导致资源重复释放</li>
</ul>
</li>
<li><p>shared_ptr内存模型</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230920101244.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230920101259.png"></p>
<ul>
<li>API</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函数API</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">p.get()</td>
<td align="center">返回p中保存的指针。小心使用，若智能指针释放了其对象，返回的指针所指向的对象也就消失了</td>
</tr>
<tr>
<td align="center">p.use_count()</td>
<td align="center">返回与p共享对象的智能指针数量；可能很慢，注意用于调试</td>
</tr>
<tr>
<td align="center">p.unique()</td>
<td align="center">若p.use_count()为1，返回true；否则返回false</td>
</tr>
<tr>
<td align="center">p &#x3D; q</td>
<td align="center">p和q都是shared_ptr，所保存的指针能相互转换。此操作会递减p的引用计数，递增q的引用计数；若p的引用计数变为0，则将其管理的原内存释放</td>
</tr>
<tr>
<td align="center">make_shared<T>(args)</td>
<td align="center">返回一个shared_ptr，指向一个动态分配的类型为T的对象。使用args初始化此对象</td>
</tr>
<tr>
<td align="center">shared_ptr<T> p(q)</td>
<td align="center">p是share_ptr q的拷贝；此操作会递增q中的计数器。q中的指针类型必须能转换为T*</td>
</tr>
<tr>
<td align="center">shared_ptr<T> p(u)</td>
<td align="center">p从unique_ptr u那里接管了对象的所有权；将u置为空</td>
</tr>
<tr>
<td align="center">shared_ptr<T> p(q,d)</td>
<td align="center">p接管了内置指针q所指向的对象的所有权。q必须能转换为T*类型。p将使用可调用的对象d来代替delete</td>
</tr>
<tr>
<td align="center">shared_ptr<T> p(p2,d)</td>
<td align="center">p是share_ptr p2的拷贝；此操作会递增p2中的计数器。p2中的指针类型必须能转换为T*，p将使用可调用的对象d来代替delete</td>
</tr>
<tr>
<td align="center">p.reset()</td>
<td align="center">p置为空。若p是唯一指向其对象的shared_ptr，reset会释放此对象</td>
</tr>
<tr>
<td align="center">p.reset(q)</td>
<td align="center">传递了参数内置指针q，会令p指向q</td>
</tr>
<tr>
<td align="center">p.reset(q,d)</td>
<td align="center">传递了参数d，将会调用d而不是delete来释放q</td>
</tr>
<tr>
<td align="center">p.swap(q)或swap(p,q)</td>
<td align="center">交换两个智能指针</td>
</tr>
</tbody></table>
<h1 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h1><ul>
<li>API</li>
</ul>
<table>
<thead>
<tr>
<th align="center">函数API</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">weak_ptr<T> w</td>
<td align="center">空weak_ptr可以指向类型为T的对象</td>
</tr>
<tr>
<td align="center">weak_ptr<T> w(sp)</td>
<td align="center">与shared_ptr sp指向相同对象的weak_ptr。T必须能转换为sp指向的类型</td>
</tr>
<tr>
<td align="center">w &#x3D; p</td>
<td align="center">p可以是一个shared_ptr或一个weak_ptr。赋值后w与p共享对象</td>
</tr>
<tr>
<td align="center">w.reset()</td>
<td align="center">将w置为空</td>
</tr>
<tr>
<td align="center">w.use_count()</td>
<td align="center">与w共享对象的shared_ptr的数量</td>
</tr>
<tr>
<td align="center">w.expired()</td>
<td align="center">若w.use_count()为0，返回true，否则返回false</td>
</tr>
<tr>
<td align="center">w.lock()</td>
<td align="center">如果expired为true，返回一个空shared_ptr；否则返回一个指向w的对象的shared_ptr</td>
</tr>
</tbody></table>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>智能指针</tag>
      </tags>
  </entry>
</search>
