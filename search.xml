<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>解决git中443问题</title>
    <url>/2023/08/03/20230803_443/</url>
    <content><![CDATA[<p>解决当使用魔法后依旧<code>git push -u origin main</code>出现443TIME OUT失败的问题。</p>
<span id="more"></span>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在本地修改库，git到github时一直443，time out。最初以为是网络的问题。</p>
<p>但是使用了魔法，还是没有效果。于是最终发现是代理没有修改端口。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol>
<li>在设置中找到代理的端口，比如我这里是 127.0.0.1:10809</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803162424.png" alt="img"></p>
<ol start="2">
<li>bash中输入以下代码即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:10809</span><br><span class="line">git config --global https.proxy http://127.0.0.1:10809</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>MobaXterm简单教程</title>
    <url>/2023/08/07/20230807_shell%E5%B7%A5%E5%85%B7MobaXterm/</url>
    <content><![CDATA[<p>日常开发中一个好用的终端软件是很重要的，而MobaXterm就是其中最好用的之一，并且最重要的是MobaXterm的免费版本的功能就十分强大。</p>
<p>本博客会介绍MobaXterm的下载，界面和简单的使用方法，还有其中的一些工具的介绍。</p>
<span id="more"></span>

<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h1><p>官方网址链接为 <a href="https://mobaxterm.mobatek.net/">MobaXterm官方网址</a> ,点击下载即可。</p>
<p>MobaXterm分为两种安装模式：</p>
<p>便携式exe文件：适合安装在U盘，双击即可运行，这样服务器账号密码什么的就很方便的管理了，出门在外只需要一个U盘就可以连接服务器。<br>安装式：正常的install安装步骤。</p>
<h1 id="2-界面介绍"><a href="#2-界面介绍" class="headerlink" title="2 界面介绍"></a>2 界面介绍</h1><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807203546.png"></p>
<p>安装打开后大概可以看到是上图的界面，可以看到主要分为三块，图中用不同颜色的框进行标注。</p>
<p>红色框内是一些我们可能用到的工具，比如session，serbers，tools，还有设置settings等。</p>
<p>蓝色框内是侧边栏，比如我们最常用的通过sessions保存的远程SSH连接服务器的列表会存放在蓝色区域，方便经常连接使用还有tools工具和macros录制脚本。</p>
<p>绿色框内是我们操作的区域，默认是途中这些西汉时的界面，如果我们打开远程服务器，终端也是显示在绿色方框内，这里面最常用红的Start local terminal和recover previous sessions也是最常用的两个功能，分别是打开本地终端和打开最近的session。</p>
<h1 id="3-功能介绍"><a href="#3-功能介绍" class="headerlink" title="3 功能介绍"></a>3 功能介绍</h1><h2 id="3-1-Session管理"><a href="#3-1-Session管理" class="headerlink" title="3.1 Session管理"></a>3.1 Session管理</h2><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807210026.png"></p>
<p>点击上图中的session按键，会出现以下界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807210158.png"></p>
<p>可以看到session中可以新建SSH，Telnet，Rsh，RDP，FTP，SFTP，Shell等功能，需要用到这些功能的时候就点击进行进一步的设置即可。其中我们最常用的就是SSH啦。</p>
<h2 id="3-2-SSH连接远程服务器"><a href="#3-2-SSH连接远程服务器" class="headerlink" title="3.2 SSH连接远程服务器"></a>3.2 SSH连接远程服务器</h2><p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807210843.png"></p>
<p>按照3.1中步骤，点击SSH可以看到如上图所示，其中需要填写的一般只有四个部分。</p>
<ul>
<li><code>Remote host</code>：填写服务器的IP地址</li>
<li><code>specify username</code>：填写你在服务器中使用的用户的名称，这样连接服务器后就可以直接登录到你的账户</li>
<li><code>Advanced SSH setting</code>：高级SSH设置，点击之后界面如下，填写Use private key，也就是服务器的密码<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807211553.png"></li>
<li><code>Bookmark settings</code>，书签设置，也就是在侧边栏中，当我们需要连接的服务器较多时，我们可以给不同的服务器起别名区别，填写Session name为我们想要的名字。<br><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807211752.png"></li>
</ul>
<p>都设置完毕后点击ok就可以了，这样在主界面的侧边栏中就会出现我们想要连接的session，以后方便一键连接远程服务器</p>
<h2 id="3-3-文本编辑器和文本对比"><a href="#3-3-文本编辑器和文本对比" class="headerlink" title="3.3 文本编辑器和文本对比"></a>3.3 文本编辑器和文本对比</h2><p>侧边栏tools-&gt;MobaTExtEditor和tools-&gt;MobaDiff</p>
<p>打开tools-&gt;MobaTExtEditor，就会显示右侧红框中的界面，方便对本地或者远程的文档进行编辑</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212100.png"></p>
<p>打开tools-&gt;MobaDiff，选择文件1和文件2，点击ok即可分析两个文档之间的区别。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212248.png"></p>
<h2 id="3-4-录制操作脚本"><a href="#3-4-录制操作脚本" class="headerlink" title="3.4 录制操作脚本"></a>3.4 录制操作脚本</h2><p>点击侧边栏的macro的如下图的红色框，即可开始录制，</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212442.png"></p>
<p>点击录制后，会显示以下界面，点击停止就会提醒我们保存脚本，做一些重复性工作时，可以录制获得脚本然后以后就可以使用该脚本宏啦</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807212547.png"></p>
<h2 id="3-5-本地服务器"><a href="#3-5-本地服务器" class="headerlink" title="3.5 本地服务器"></a>3.5 本地服务器</h2><p>某些情况下，我们需要搭建自己本地的服务器，以方便通过http或ftp等协议传输本地文件或数据，MobaXterm就提供了实现该服务的功能，包括了HTTP、FTP、Telent等众多的协议。</p>
<p>点击上方的servers按钮即可打开</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807213112.png"></p>
<p>然后选择需要共享的文件夹路径，点击HTTP的开始按钮之后输入访问 <a href="http://localhost/">http://localhost:80/</a>即可访问该文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807213423.png"></p>
<h2 id="3-6-小游戏"><a href="#3-6-小游戏" class="headerlink" title="3.6 小游戏"></a>3.6 小游戏</h2><p>上方按钮中有games选项，里面有一些经典的小游戏，适合上班摸鱼的时候使用</p>
<h1 id="4-使用技巧"><a href="#4-使用技巧" class="headerlink" title="4 使用技巧"></a>4 使用技巧</h1><h2 id="4-1-多种终端同时管理"><a href="#4-1-多种终端同时管理" class="headerlink" title="4.1 多种终端同时管理"></a>4.1 多种终端同时管理</h2><p>MobaXterm也可以使用Git，当我们同时需要使用Git Bash和远程服务器的时候，坚持切换会很麻烦，这时可以在首页右键点击Git Bash就可以在MobaXterm中同时管理多种终端啦。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807213746.png"></p>
<h2 id="4-2-SSH-休眠管理"><a href="#4-2-SSH-休眠管理" class="headerlink" title="4.2 SSH 休眠管理"></a>4.2 SSH 休眠管理</h2><p>默认设置5分钟连接的SSH会自动休眠，如果想要长时间不休眠可以在Settings-&gt;SSH-&gt;SSH keepalive修改，勾上该选项即可，如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230807214018.png"></p>
<p><strong>持续更新中…</strong></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>MobaXterm</tag>
        <tag>shell</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>建立个人博客网站详细教程</title>
    <url>/2023/08/03/20230803_blog%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>使用github+hexo+cloudflare+node.js+next主题建立属于自己的个人博客网站，博客主要分7个部分分别是1 使用git同步github的库，2 安装node.js，3 创建网站（Hexo框架，4 修改主题，5 github图床搭建，6 博客基本功能，7 博客扩展内容(持续更新)。</p>
<p>我主要参考了<a href="https://zhuanlan.zhihu.com/p/102592286">知乎-从零开始搭建个人博客（超详细）</a>这一篇博客，但是由于是2020年的教程，中间有一些坑，并且我在他的基础上增加了一些部分。本博客主要是记录搭建网站的过程，主要是个人记录，但是如果能够帮到其他的人就更好了，大家可以看看我已经搭建好的博客网站 <a href="https://mobbu.space/">“灵能相谈所”</a>，虽然目前没有几篇博客&#x3D;。&#x3D;</p>
<p>其实搭建博客并不困难，但是一直坚持写博客并且记录下来属实珍贵，在博主搭建博客搜索教程的过程中，看到有许多以前的网友搭建的博客都已经荒废，但也有很少部分坚持下来，希望我和大家都能坚持记录吧。</p>
<span id="more"></span>

<h1 id="1-使用git同步github的库"><a href="#1-使用git同步github的库" class="headerlink" title="1 使用git同步github的库"></a>1 使用git同步github的库</h1><h2 id="1-1-安装git"><a href="#1-1-安装git" class="headerlink" title="1.1 安装git"></a>1.1 安装git</h2><blockquote>
<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
</blockquote>
<ol>
<li><p>安装git，打开官方网站<a href="https://git-scm.com/download/win">git官方下载</a>,点击下载windouws64位即可。安装时一直选择默认安装即可，注意安装位置可以不用安装到C盘即可。</p>
</li>
<li><p>测试安装是否成功，点击鼠标右键，出现以下界面即成功</p>
<div align=center><img src = "https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803192109.jpg" width =300></div>
</li>
<li><p>打开Git Bash，输入git，回车，没有出现错误即安装成功</p>
</li>
</ol>
<h2 id="1-2-绑定github"><a href="#1-2-绑定github" class="headerlink" title="1.2 绑定github"></a>1.2 绑定github</h2><p>默认已经有github账户，若没有github账户可直接登录github.com官网注册即可，注意如果有谷歌邮箱，则优先使用谷歌邮箱创建账户，在使用一些国外的软件时，登录会方便一点</p>
<ol>
<li>鼠标右键，打开git bash，输入ssh查看是否安装ssh</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803192758.jpg"></p>
<ol start="2">
<li>输入命令<code>ssh-keygen -t rsa</code> 按照指定RSA算法生成密钥，此时会生成两个文件分别是密钥id_rsa和公钥id_rsa.pub。该文件在~&#x2F;.ssh（C盘当前用户的目录下）中。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803193021.jpg"></p>
<ol start="3">
<li>复制公钥id_rsa.pub中的内容添加到github，用户-&gt;settings-&gt;SSH and GPG keys 中的按键new SSH key，将id_rsa.pub中的内容复制进去即可</li>
</ol>
<div align=center><img src = "https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803193414.jpg" width =400></div>


<ol start="4">
<li>在git bash中输入<code>ssh -T git@github.com</code>进行验证<br>注意：第一次会出现欢迎的语句，输入yes即可</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/20230803193132.jpg"></p>
<h2 id="1-3-提交修改文件"><a href="#1-3-提交修改文件" class="headerlink" title="1.3 提交修改文件"></a>1.3 提交修改文件</h2><p>默认本地没有git仓库</p>
<ol>
<li>在github上新建仓库，记得选择public，创建成功后，点击clone复制网址，如果http不行就使用git。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194258.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194350.jpg"></p>
<ol start="2">
<li>此时，打开你准备放置仓库的文件夹，比如我在D盘创建firstRepo文件夹，打开该文件夹右键打开Git Bash（或者cd到指定文件夹），在bash中输入<code>git clone 复制的网址</code></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194506.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230803194820.jpg"></p>
<ol start="3">
<li><p>此时</p>
<ul>
<li>方法一：直接在main branch中修改,依次输入以下指令（每一行为一条指令） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;main&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li>
<li>如果出现问题可以创建新的branch修改后再改回到main branch中，修改完成后记得删除新建的branch，如下命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch newbranch    # 创建新branch</span><br><span class="line">git branch              # 查询现有branch</span><br><span class="line">git checkout newbranch  # 切换到新建的branch</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;newbranch</span><br><span class="line">git checkout main       # 切回main</span><br><span class="line">git merge newbranch     # 修改更新到main branch中</span><br><span class="line">git branch -D newbranch # 删除newbranch</span><br><span class="line">git push -u origin main # 把修改的推到github中的main分支里</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查看github仓库中，出现test文档，验证成功</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804095348.jpg"></p>
<h1 id="2-安装node-js"><a href="#2-安装node-js" class="headerlink" title="2 安装node.js"></a>2 安装node.js</h1><ol>
<li><p>在<a href="https://nodejs.org/en">node.js官网</a>下载即可，下载完成后在cmd命令行中输入<code>node -v</code>和<code>npm -v</code>检查一下版本即可</p>
</li>
<li><p>配置环境变量<br>如果不配置，默认在C盘占据空间，还可能会出现安装hexo后无法使用问题</p>
</li>
</ol>
<p>在非系统盘，比如D盘新建文件加nodejs，并且在nodejs中新建node_cache、node_global文件夹，然后再cmd中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>

<p>然后打开系统属性中环境变量，在系统变量中添加变量名为<code>NODE_PATH</code>,值为<code>D:\nodejs\node_global\node_modules</code></p>
<p>再修改用户变量中的<strong>Path</strong>，修改其中的npm的路径到D:\nodejs\node_global</p>
<ol start="3">
<li>测试：在cmd命令下执行<code>npm install webpack -g</code>,执行完毕后webpack模块就在刚刚设置的默认文件夹中了</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804100812.jpg"></p>
<p>Hexo是个人博客网站的框架，安装前需要先在</p>
<h1 id="3-创建网站（Hexo框架）"><a href="#3-创建网站（Hexo框架）" class="headerlink" title="3 创建网站（Hexo框架）"></a>3 创建网站（Hexo框架）</h1><p>个人博客网站使用Hexo框架，首先需要在Github先创建个人的pages</p>
<h2 id="3-1-在github上创建你的个人pages"><a href="#3-1-在github上创建你的个人pages" class="headerlink" title="3.1 在github上创建你的个人pages"></a>3.1 在github上创建你的个人pages</h2><ol>
<li>在github上创建一个仓库，仓库名为：<code>你的github名.github.io</code>如下图(因为博主已经创建页面，所以显示错误)，然后点击创建即可，此时就能打开你的网页，只是其中什么也没有</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804101518.jpg"></p>
<h2 id="3-2-安装Hexo"><a href="#3-2-安装Hexo" class="headerlink" title="3.2 安装Hexo"></a>3.2 安装Hexo</h2><ol>
<li><p>首先建立一个存储静态网页的文件夹，如创建在D盘创建Blog，在该文件夹中打开git Bush，输入 <code>npm install -g hexo-cli</code></p>
</li>
<li><p>安装完成后输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init # 初始化</span><br><span class="line">hexo g # 静态部署</span><br><span class="line">hexo s # 本地预览</span><br></pre></td></tr></table></figure>
<p>此时打开 <a href="http://localhost:4000/">本地调试网址</a> 网址就可查看部署的初始化的网页，按CTRL+C停止该进程。</p>
</li>
<li><p>部署网页后，此时我们需要hexo部署到github上，打开Blog文件夹中的_config.yml文件，记事本打开就行。在文件底部填入</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/你的github名/你的github名.github.io.git  #你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p><strong>注意在Hexo和之后的所有编辑中，冒号后面都需要加上空格</strong></p>
<ol start="4">
<li><p>回到Blog文件夹中，打开Git Bash，安装Git部署插件<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>此时再输入以下三条命令，以后会经常用到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹</span><br><span class="line">hexo d       #生成网站静态文件，并部署到指定仓库</span><br></pre></td></tr></table></figure>
<p><strong>注意：如果需要预览效果，任然可以在<code>hexo g</code>命令部署后，使用<code>hexo s</code>命令在本地进行预览网页效果再决定是否部署到github上</strong></p>
</li>
<li><p>完成后打开浏览器输入 <code>https://xxx.github.io</code>，就可以打开网页，此时网页应该是之前部署的hexo的默认网页。</p>
</li>
</ol>
<h2 id="3-3-使用cloudflare解析域名"><a href="#3-3-使用cloudflare解析域名" class="headerlink" title="3.3 使用cloudflare解析域名"></a>3.3 使用cloudflare解析域名</h2><blockquote>
<p>Cloudflare 是一家全球最著名的 CDN 加速服务商之一，提供了免费和付费的网站加速和保护服务。</p>
</blockquote>
<p>如果你没有域名，或者就准备使用github自带域名，那么不需要看这一part。注意，使用cloudflare在国内可能会速度变慢，但是由于之前博主部署过一些服务，索性CDN就都用的cloudflare。</p>
<p>博主是在阿里云购买的域名，便宜的一年就几块钱。</p>
<ol>
<li><p>以阿里云为例，在控制台你的域名下，点击DNS管理-&gt;DNS修改选项，把DNS服务器修改为fay.ns.cloudflare.com和nile.ns.cloudflare.com，生效可能有一段时间。</p>
</li>
<li><p>然后我们注册cloudflare账户，登录官网注册即可。注册完毕后会让我们添加我们自己的域名，比如mobbu.space。添加成功后，选择免费计划就可以了。</p>
</li>
<li><p>首先修改DNS记录，点击添加如下图的5条记录，其中每一行第一个值是类型，第二个是名称，第三个是IPv4地址或者目标。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804104429.jpg"></p>
<ol start="4">
<li>然后打开Blog&#x2F;source文件夹，添加CNAME文件，可以创建CNAME.txt，记事本打开后写上自己的域名，比如mobbu.space，保存后退出，最后将.txt后缀删除。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804110751.jpg"></p>
<ol start="5">
<li>在BLog文件夹中，将我们修改的内容同步到github中，使用经典三部曲<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g       </span><br><span class="line">hexo d      </span><br></pre></td></tr></table></figure></li>
<li>打开github验证CNAME是否在项目中，打开setting设置查看pages中的custom domain是否修改完毕。修改完成后此时就可以直接输入你的域名进入个人博客网站了，虽然此时其中并没有内容。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804110834.jpg"></p>
<h1 id="4-修改主题"><a href="#4-修改主题" class="headerlink" title="4 修改主题"></a>4 修改主题</h1><p>Next主题源地址为 <a href="https://github.com/theme-next/hexo-theme-next">theme-next&#x2F;hexo-theme-next</a></p>
<table>
<thead>
<tr>
<th align="center">注意事项</th>
<th align="center">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">站点配置文件</td>
<td align="center">Blog&#x2F;_config.yml</td>
</tr>
<tr>
<td align="center">主题配置文件</td>
<td align="center">Blog&#x2F;themes&#x2F;next&#x2F;_config.yml</td>
</tr>
<tr>
<td align="center">修改格式</td>
<td align="center">冒号后都需要空格</td>
</tr>
</tbody></table>
<ol>
<li><p>在Blog&#x2F;theme目录下git clone我们使用的主题NEXT<br><code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code></p>
</li>
<li><p>打开Blog&#x2F;_config.yml，后文称为<strong>站点配置文件</strong>,进行如下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: “灵能相谈所”         # 你的网站标题</span><br><span class="line">subtitle: &#x27;&#x27;</span><br><span class="line">description: &#x27;道阻且长&#x27;     #个性签名</span><br><span class="line">keywords:</span><br><span class="line">author: mobbu               # 作者</span><br><span class="line">language: zh-CN             # 主题语言</span><br><span class="line">timezone: &#x27;Asia/Shanghai&#x27;   # 时区</span><br></pre></td></tr></table></figure>
</li>
<li><p>next的主题也有四种，可以在Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中修改后自己挑选喜欢的主题(可以使用hexo s命令预览效果)</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini # 博主使用的主题</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改完成后依旧使用三部曲更新部署，每次我们修改后都使用这三条命令将本地修改部分同步到github上，这也是git分布式的体现。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g       </span><br><span class="line">hexo d      </span><br></pre></td></tr></table></figure>

<p>注意，将本地文件部署到github上可能会有一定延迟，这是正常情况，可以稍等一会 再打开个人网站查看效果。</p>
<h1 id="5-github图床搭建"><a href="#5-github图床搭建" class="headerlink" title="5 github图床搭建"></a>5 github图床搭建</h1><p>使用markdown记录时，当我们使用的图片就需要用到图床，可以把图床理解为网络上的图片仓库，使用时调出对应图片的链接即可。</p>
<p>博主这里使用github当作图床，使用第三方的图床总归都有数据丢失的风险。但是我选择使用github当作图床的原因有：1. 我们博客网站本身就通过github实现，那么github停止服务时，网站已经不成立了2. github免费，并且有一些现成的开源项目工具可用使用比较方便。</p>
<p>但是github当作图床也有一些缺点，比如速度可能较慢，还有就是有一定数据丢失风险，解决方法就是定时把数据在本地备份一下，不过这些对于“年轻人”来说可以克服。</p>
<ol>
<li><p>创建github图床仓库，依旧是在repositories中打开New输入你希望的仓库名字即可。</p>
</li>
<li><p>下载PicGo工具，<a href="https://github.com/Molunerfinn/PicGo/releases">picgo下载地址</a>，选择稳定版下载即可。如果github卡顿可以<a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo">山东大学镜像站下载地址</a>下载。</p>
</li>
<li><p>打开picgo-&gt;图床设置-&gt;github,其中设定仓库名就是第一步中配置的，比如你的github账户为<code>mobbu</code>，你的仓库名为<code>img</code>，那么应该填入<code>mobbu/img</code>，以此类推，其中需要设定token，</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/QQ%E6%88%AA%E5%9B%BE20230804112404.jpg"></p>
<ol start="4">
<li>配置token：打开github-&gt;settings-&gt;developer settings，选择tokens(classic)，新建tokens</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804125716.jpg"></p>
<p>新建的页面中填入note就是你token的名字，expiration中选择tokens的时效，直接选永久，然后给仓库的所有权限就可以了，也就是勾上图上的repo，点击完成。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804125830.jpg"></p>
<p>完成后会出现你的token的值，保存好后复制到之前的设定Token中即可。<br>5. 使用示例</p>
<p>图像上传到上传区之后</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804130355.jpg"></p>
<p>点击相册中的对应图片左下角为复制链接，直接复制到md文件中就可以了</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804130446.jpg"></p>
<ol start="6">
<li>一些可能的问题<br> 比如出现：picgo上传失败 请检查配置项和网络的问题<ul>
<li>解决方案：首先检查PicGo设置-&gt;设置Server中的监听端口是否为36677。如果是36677依旧有问题，那么可以修改图床设置-&gt;github-&gt;设定存储路径，修改为一个新的路径，即可上传成功</li>
</ul>
</li>
</ol>
<h1 id="6-博客基本功能"><a href="#6-博客基本功能" class="headerlink" title="6 博客基本功能"></a>6 博客基本功能</h1><h2 id="6-1-一些基础设置"><a href="#6-1-一些基础设置" class="headerlink" title="6.1 一些基础设置"></a>6.1 一些基础设置</h2><ol>
<li>菜单</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的munu部分，把需要的菜单部分前的注释号(#)删掉即可，觉得自己需要哪些部分就设置哪些部分即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                      #首页</span><br><span class="line">  archives: /archives/ || archive      #归档</span><br><span class="line">  categories: /categories/ || th       #分类</span><br><span class="line">  tags: /tags/ || tags                 #标签</span><br><span class="line">  about: /about/ || user               #关于</span><br><span class="line">  #schedule: /schedule/ || calendar    #日历</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span><br><span class="line">  #commonweal: /404/ || heartbeat      #腾讯公益404</span><br></pre></td></tr></table></figure>
<p>如果有自己想要添加的新分类，自行添加即可，但是新添加的菜单需要翻译对应的中文，打开theme&#x2F;next&#x2F;languages&#x2F;zh-CN.yml，在menu下设置就好了</p>
<p>在根目录下打开Git Bash，输入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>此时在根目录的sources文件夹下会生成categories、tags、about三个文件，每个文件中有一个index.md文件，修改内容比如about中的index.md的修改如下，其余的以此类推：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于本站</span><br><span class="line">date: 2023-08-02 20:06:14</span><br><span class="line">type: &quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>此时在这个md文档的后边就添加上你想要写的内容，比如about中你可以写上你个人博客包含的内容或者你的一些想法等等。</p>
<ol start="2">
<li>设置头像网站标题</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/avatar.gif   # 图片的位置</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true   #头像展示在圈里</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false  #头像随光标旋转</span><br></pre></td></tr></table></figure>

<p>此时基本的菜单和头像以及昵称都设置完毕了。</p>
<h2 id="6-2-添加博客流程"><a href="#6-2-添加博客流程" class="headerlink" title="6.2 添加博客流程"></a>6.2 添加博客流程</h2><p>在Blog&#x2F;source&#x2F;_posts中添加需要加入的博客，比如本博客<code>如何建立blog网站.md</code>，然后进行上传三部曲同步到github上即可。注意md文件中可以进行如下设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 建立个人博客网站详细教程</span><br><span class="line">categories: 技术博客</span><br><span class="line">tags:</span><br><span class="line">    - Github</span><br><span class="line">    - hexo</span><br><span class="line">    - cloudflare</span><br><span class="line">    - node.js</span><br><span class="line">    - next主题</span><br><span class="line">    - 个人图床建立</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其中title就是我们博客显示的标题，categories是博客的分类，tags是博客的标签，在这后跟上我们想写的内容即可，其余就是md的一些语法，后序可能考虑更新一下md的一些基础和好用的语法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804200934.jpg"></p>
<h1 id="7-博客扩展内容"><a href="#7-博客扩展内容" class="headerlink" title="7 博客扩展内容"></a>7 博客扩展内容</h1><p>对于网页的一些丰富的内容设置</p>
<ol>
<li>设置建站时间</li>
</ol>
<p>打开themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="line">  since: 2023-08   #建站时间</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804200653.jpg"></p>
<ol start="2">
<li>网站图标设置</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，favicon部分，修改对应部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/mob16.jpg            # 网站图标（小）</span><br><span class="line">  medium: /images/mob32.jpg           # 网站图标（中）</span><br><span class="line">  apple_touch_icon: /images/mob.jpeg  # 网站图标（苹果中的图标）</span><br><span class="line">  safari_pinned_tab: /images/mob.svg  # 网站图标（苹果中的矢量图）</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure>
<p>其中将自己喜欢的图片转换成对应分辨率的图片或者对应格式即可，通过搜索引擎搜索很容易找到在线转换的网站。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230804201343.jpg"></p>
<ol start="3">
<li>背景图片设置</li>
</ol>
<p>首先在Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，将 style: source&#x2F;_data&#x2F;styles.styl 取消注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  style: source/_data/styles.styl</span><br></pre></td></tr></table></figure>
<p>然后再Blog&#x2F;source文件夹中创建_data&#x2F;styles.styl，其中填入以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background:url(/images/background.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">    // background-size: 100% 100%;</span><br><span class="line">    background-size: cover;</span><br><span class="line">    -webkit-background-size: cover;</span><br><span class="line">    -o-background-size: cover;</span><br><span class="line">    -moz-background-size: cover;</span><br><span class="line">    -ms-background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  opacity: 0.98; //0.98为透明程度，越大越不透明</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line">.sidebar &#123;</span><br><span class="line">  opacity: 0.98;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(255,255,255,0.98);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: 0.98;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>设置预览摘要</li>
</ol>
<p>在md文章中插入 <code>&lt;!-- more --&gt;</code>，该标签之上的是摘要，之后的内容不可见，需点击全文阅读按钮。</p>
<ol start="5">
<li>设置侧边栏显示效果</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，Sidebar Settings部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position. #设置侧边栏位置</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  #  - post    默认显示模式</span><br><span class="line">  #  - always  一直显示</span><br><span class="line">  #  - hide    初始隐藏</span><br><span class="line">  #  - remove  移除侧边栏</span><br><span class="line">  display: post</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>侧边栏推荐阅读</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中,links部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: fa fa-link</span><br><span class="line">  title: Links Website</span><br><span class="line">  # Available values: block | inline</span><br><span class="line">  layout: block</span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  #Title: http://yoursite.com</span><br><span class="line">  mobbu的博客园: https://www.cnblogs.com/mobbu</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>博文置顶</li>
</ol>
<p>首先在根目录Blog打开Git Bash，执行下面的命令</p>
<p>npm uninstall hexo-generator-index –save<br>npm install hexo-generator-index-pin-top –save</p>
<p>然后打开blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: example</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>图片可点击放大查看</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中，修改以下部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br><span class="line">jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span><br><span class="line">fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span><br><span class="line">fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span><br></pre></td></tr></table></figure>


<ol start="9">
<li>添加社交链接</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中,social部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/mobbu919 || fab fa-github</span><br><span class="line">  E-Mail: mobbu777@163.com || fa fa-envelope</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>设置博文内超链接为指定颜色</li>
</ol>
<p>Blog&#x2F;themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl文件，添加到最后，修改color中的色号即可修改为指定颜色，这个可以在搜索引擎中查找</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">     color: #0593d3;</span><br><span class="line">     border-bottom: none;</span><br><span class="line">     &amp;:hover &#123;</span><br><span class="line">       color: #0477ab;</span><br><span class="line">       text-decoration: underline;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>显示文章字数和阅读时长</li>
</ol>
<p>首先在Blog目录下打开Git Bash，执行<code>npm install hexo-wordcount --save</code></p>
<p>然后打开Blog&#x2F;_config.yml，添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># symbols_count_time:</span><br><span class="line">  symbols: true                # 文章字数统计</span><br><span class="line">  time: true                   # 文章阅读时长</span><br><span class="line">  total_symbols: true          # 站点总字数统计</span><br><span class="line">  total_time: true             # 站点总阅读时长</span><br><span class="line">  exclude_codeblock: false     # 排除代码字数统计</span><br></pre></td></tr></table></figure>

<ol start="12">
<li>显示站点文章总字数</li>
</ol>
<p>首先在Blog目录下打开Git Bash，执行<code>npm install hexo-wordcount --save</code></p>
<p>然后打开Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig，尾部添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol start="13">
<li>文章末尾添加版权说明</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的creative_commons部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true  # 将false改为true即可显示版权信息</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<p>此时还需要添加网站url，打开Blog&#x2F;_config.yml，找到url部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://mobbu.space #修改为你的博客地址</span><br></pre></td></tr></table></figure>

<ol start="14">
<li>添加访问量统计</li>
</ol>
<p>打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的busuanzi_count，修改enable属性为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>然后再Blog&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig中最后添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">    &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&lt;!-- 不蒜子计数初始值纠正 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line"></span><br><span class="line">    var int = setInterval(fixCount, 50);  // 50ms周期检测函数</span><br><span class="line">    var countOffset = 20000;  // 初始化首次数据</span><br><span class="line"></span><br><span class="line">    function fixCount() &#123;            </span><br><span class="line">       if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + countOffset); </span><br><span class="line">            clearInterval(int);</span><br><span class="line">        &#125;                  </span><br><span class="line">        if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) != &quot;none&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + countOffset); // 加上初始数据 </span><br><span class="line">            clearInterval(int); // 停止检测</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">       	</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="15">
<li>添加评论功能</li>
</ol>
<p>使用的是liveRe，一个韩国评论网站，去官网注册后，在主题配置文件对应位置修改即可，不过该方案需要用户登录SNS，博主不知道为什么出现只能设置facebook，twtter，不能设置qq的问题，等待后序方案ing。</p>
<ol start="16">
<li>本地搜索</li>
</ol>
<p>首先在Blog目录下打开Git Bash，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>然后在Blog&#x2F;_config.yml中添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<p>最后打开Blog&#x2F;themes&#x2F;next&#x2F;_config.yml中的local_search部分，将enable修改为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>有可能会出现部署到网站上出现以下问题，并且此时在本地没有出现该问题，此时清除浏览器的缓存就可以解决该问题了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230806161155.jpg"></p>
<p><strong>持续更新中…</strong></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>hexo</tag>
        <tag>cloudflare</tag>
        <tag>node.js</tag>
        <tag>next主题</tag>
        <tag>个人图床建立</tag>
      </tags>
  </entry>
  <entry>
    <title>steam一键切换用户的脚本</title>
    <url>/2023/08/08/20230808_steam%E7%94%A8%E6%88%B7%E5%88%87%E6%8D%A2%E8%84%9A%E6%9C%ACbat/</url>
    <content><![CDATA[<p>由于博主经常用很多不同的号玩CSGO，每一次都需要输入账号密码，并且等待令牌，十分麻烦，遂找到了一个脚本切换steam登录信息，其实steam++也可以实现这个功能，但是毕竟很多时候是借其他人的号，有泄露密码风险的还是不好。</p>
<p>原理就是Steam的默认登录账号是写在注册表的，然后会根据注册表账号去Steam&#x2F;config&#x2F;loginusers.vdf找对应账号信息，所以切换用户的时候把注册表修改到对应的账号就可以了。</p>
<span id="more"></span>

<p>首先你需要登陆过一次你记录的账户，并且选择记住密码登录。这样你的本地就会保存对应的账号信息，此时就可以使用脚本修改到对应的账号就可以了。</p>
<h1 id="1-创建脚本并修改"><a href="#1-创建脚本并修改" class="headerlink" title="1 创建脚本并修改"></a>1 创建脚本并修改</h1><p>新建脚本文件ChangeSteamAccount.bat，输入以下代码：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">taskkill</span> /f /im steam.exe</span><br><span class="line"><span class="built_in">taskkill</span> /f /im SteamService.exe</span><br><span class="line"><span class="built_in">echo</span> 请输入你要登录的账号(<span class="number">1</span>.妹妹<span class="number">1</span>；<span class="number">2</span>.妹妹<span class="number">2</span>；<span class="number">3</span>.妹妹<span class="number">3</span>)：</span><br><span class="line"><span class="built_in">set</span> /p area=</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">1</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account1 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">2</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account2 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">3</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account3 /f)</span><br><span class="line"><span class="built_in">start</span> D:\Steam\Steam.exe</span><br></pre></td></tr></table></figure>

<p>接下来你需要对上述代码中的对应部分进行修改</p>
<ol>
<li>在上述代码中的第四行，也就是以下这一行代码进行修改，将括号中的文字修改为你想要提示的语句，比如我这里有三个妹妹的号，我就可以标记为妹妹1，妹妹2，妹妹3.</li>
</ol>
<p><code>echo 请输入你要登录的账号(1.妹妹1；2.妹妹2；3.妹妹3)：</code></p>
<ol start="2">
<li><p>在上述代码的第5，6，7行，修改if判断语句中的Account1，Account2，Account3为你想修改的账号的steam登录名，就比如上面的妹妹1的steam名字为meiyangyang，那么就把Account1修改为meiyangyang就可以了。</p>
</li>
<li><p>修改第8行，将路径修改为你的steam路径即可，路径可以通过<code>右键steam快捷键-&gt;快捷键方式-&gt;目标</code>找到。</p>
</li>
<li><p>如果想添加更多的号，直接类推上述操作即可，比如想添加妹妹4，那么代码如下：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">taskkill</span> /f /im steam.exe</span><br><span class="line"><span class="built_in">taskkill</span> /f /im SteamService.exe</span><br><span class="line"><span class="built_in">echo</span> 请输入你要登录的账号(<span class="number">1</span>.妹妹<span class="number">1</span>；<span class="number">2</span>.妹妹<span class="number">2</span>；<span class="number">3</span>.妹妹<span class="number">3</span>；妹妹<span class="number">4</span>)：</span><br><span class="line"><span class="built_in">set</span> /p area=</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">1</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account1 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">2</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account2 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">3</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account3 /f)</span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%area%</span> == <span class="number">4</span> (REG ADD HKEY_CURRENT_USER\SOFTWARE\Valve\Steam /v AutoLoginUser /t REG_SZ /d Account4 /f)</span><br><span class="line"><span class="built_in">start</span> D:\Steam\Steam.exe</span><br></pre></td></tr></table></figure>
<p>其中修改了第四行，然后添加了一个if判断，记得将if判断中的area判断值修改为4，将Account4修改为你想要的名字。</p>
</li>
<li><p>可能会出现乱码情况，此时需要将你文本编辑的编码方式从UTF-8修改为ANSI，直接另存为文件，选择编码方式为ANSI即可解决问题</p>
</li>
</ol>
<h1 id="2-实操演示"><a href="#2-实操演示" class="headerlink" title="2 实操演示"></a>2 实操演示</h1><p>如下图为打开后的界面，由于我此时打开的电脑没有安装steam，所以第一行第二行错误，其实这两行错误不用管，此时只需要输入你想登录的账号的序号就可以，比如我想登录妹妹1的账号，此时只需要输入1，按下回车即可登录。</p>
<p><img src="https://cdn.jsdelivr.net/gh/mobbu919/MyImgTG/img/20230808105819.png"></p>
<p><strong>感谢看到这里，在记录中收获成长，道阻且长</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>steam</tag>
        <tag>bat脚本</tag>
      </tags>
  </entry>
</search>
